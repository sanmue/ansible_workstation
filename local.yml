---
# run first: tasks/basic_all/ScriptsExtern/install_SWandConf.sh

# ### -----------
# TAGS - Overview
#
# - 'always' (Special tag / reserved name): Gather Facts and Variables
# - 'shellrc': create / update shell conf (e.g. .bashrc, .zshrc) + 'Starship' cross shell prompt
# - 'vimrc': create / update vim conf + plugins
# - 'nnnplugs' create / update 'nnn' plugins + xterm conf for nnn-peview-tui
#
# ### -----------

- name: Gather Facts and Variables
  tags: always
  hosts: localhost
  connection: local
  become: false
  gather_facts: true
  pre_tasks:
    - name: Pre Tasks - Gather Facts and Variables
      ansible.builtin.import_tasks: tasks/basic_all/config_workstation-ansibleFacts.yml

- name: Add repos + update
  hosts: localhost
  connection: local
  become: true
  pre_tasks:
    - name: Pre Tasks - addrepos
      ansible.builtin.import_tasks: tasks/basic_all/config_workstation-addrepos.yml
    - name: Pre Tasks - all update
      ansible.builtin.import_tasks: tasks/basic_all/all_update.yml

- name: Install and config snapper+btrfs
  hosts: localhost
  connection: local
  become: true
  tasks:
    # wird in init-install-Script erledigt, da vor Inst aller (init) Software schon eingerichtet sein soll
    # + müsste hier entsprechend angepasst/aktualisert werden
    #
    # - name: Install packages - snapper+btrfs
    #   ansible.builtin.import_tasks: tasks/basic_all/packages_workstation-snapperBtrfs.yml
    - name: Config Services - snapper+btrfs
      ansible.builtin.import_tasks: tasks/basic_all/config_all-services-snapperBtrfs.yml

- name: Software, Firewall, Servcices, VM, User, Settings
  hosts: localhost
  connection: local
  become: true
  tasks:
    # ----------------------------------------------------------
    # ### Entfernen nicht benötigter vorinstallierter Pakete
    - name: Entfernen nicht benötigter vorinstallierter Pakete (Gnome)
      ansible.builtin.import_tasks: tasks/Desktop_Gnome/packages_workstation-Gnome-removePreInstalls.yml
    # TODO: Update + Test:
    # - name: Entfernen nicht benötigter vorinstallierter Pakete (Plasma)
    #   ansible.builtin.import_tasks: tasks/Desktop_Plasma/packages_workstation-Plasma-removePreInstalls.yml
    # ----------------------------------------------------------
    # ### Installation Software-Packages inkl. Flatpak (Snap: derzeit keine)
    # - repo:
    - name: Basic packages
      ansible.builtin.import_tasks: tasks/basic_all/packages_workstation-basic.yml
    # - name: Packages Plasma
    #   ansible.builtin.import_tasks: tasks/Desktop_Plasma/packages_workstation-Plasma.yml
    - name: Packages Gnome
      ansible.builtin.import_tasks: tasks/Desktop_Gnome/packages_workstation-Gnome.yml
    - name: Packages Gnomeshell
      ansible.builtin.import_tasks: tasks/Desktop_Gnome/packages_workstation-gnomeshellstuff.yml
    #
    # - flatpak:
    - name: Config Flatpak
      ansible.builtin.import_tasks: tasks/flatpakSnap/config_workstation-flatpak.yml
    - name: Packages Flatpak
      ansible.builtin.import_tasks: tasks/flatpakSnap/packages_workstation-flatpak.yml
    #
    # currently no snaps
    # - snap:
    # - name: Config Snap
    #   ansible.builtin.import_tasks: tasks/flatpakSnap/config_workstation-snap.yml
    # - name: Packages Snap
    #   ansible.builtin.import_tasks: tasks/flatpakSnap/packages_workstation-snap.yml
    #
    # - lokal heruntergeladene Pakete:
    - name: Install local packages
      ansible.builtin.import_tasks: tasks/basic_all/packages_workstation-localPackageInstall.yml
    - name: Install local packages - fix for CitrixIcaclient on Gnome
      ansible.builtin.import_tasks: tasks/fix/config_workstation-Gnome-citrixIcaclient.yml
    # ----------------------------------------------------------
    # ### Config Firewall, Cron, Services, sonstige Settings:
    - name: Config Firewall all
      ansible.builtin.import_tasks: tasks/basic_all/config_all-firewall.yml
    - name: Config Firewall workstation
      ansible.builtin.import_tasks: tasks/basic_all/config_workstation-firewall.yml
    - name: Config Settings all misc
      ansible.builtin.import_tasks: tasks/basic_all/config_all-settings-misc.yml
    - name: Config Services all - systemweit
      ansible.builtin.import_tasks: tasks/basic_all/config_all-services-misc.yml
      # user-spezifische Servcies: siehe unten "User Services": tasks/basic_all/config_all-services-misc-user.yml
    - name: Config Cron
      ansible.builtin.import_tasks: tasks/basic_all/config_all-cron.yml
    # ----------------------------------------------------------
    # ### Virtualisierung:
    - name: VM - Qemu KVM
      ansible.builtin.import_tasks: tasks/VM/packages_workstation-VM-QemuKvm.yml
    - name: VM - daemon
      ansible.builtin.import_tasks: tasks/VM/config_all-VM-daemon.yml
    - name: VM - users
      ansible.builtin.import_tasks: tasks/VM/config_all-VM-users.yml
    - name: VM - create
      ansible.builtin.import_tasks: tasks/VM/config_all-VM-QemuKvm-create.yml
    # ----------------------------------------------------------
    # ### Create Users / Config User privileges:
    - name: Config users
      ansible.builtin.import_tasks: tasks/basic_all/config_all-users.yml
    # ----------------------------------------------------------
    # ### Mail:
    # Nur lokaler Mailversand bei Start/Ende Scan + VirusEvent von ClamAV
    - name: Install packages for (local) mail
      ansible.builtin.import_tasks: tasks/basic_all/packages_all-mail.yml
    - name: Config postfix
      ansible.builtin.import_tasks: tasks/basic_all/config_all-mail.yml
    - name: Config postfix.service
      ansible.builtin.import_tasks: tasks/basic_all/config_all-mail-service.yml
    - name: Initial test mail
      ansible.builtin.import_tasks: tasks/basic_all/config_all-mail-testmail.yml
    # ----------------------------------------------------------
    # ### Python
    - name: Python Env
      ansible.builtin.import_tasks: tasks/basic_all/packages_workstation-pythonEnv.yml
    - name: Pip and Pipx install
      ansible.builtin.import_tasks: tasks/basic_all/packages_workstation-pythonPip.yml
    # ----------------------------------------------------------
    # ### NVM / Node.js
    - name: NVM Node.js
      ansible.builtin.import_tasks: tasks/basic_all/packages_workstation-nvmNodejs.yml
    # ----------------------------------------------------------
    # ### cleanup:
    - name: Cleanup
      ansible.builtin.import_tasks: tasks/basic_all/all_cleanup.yml

- name: Genome Shell Extension + Desktop Settings
  hosts: localhost
  connection: local
  become: true
  become_user: "{{ env_user }}"
  tasks:
    - name: Config Gnome Desktop Preferences
      ansible.builtin.import_tasks: tasks/Desktop_Gnome/config_workstation-Gnome-DesktopPreferences.yml

- name: Write Final Message
  hosts: localhost
  connection: local
  become: true
  become_user: "{{ env_user }}"
  tasks:
    - name: Write Final Message
      ansible.builtin.debug:
        msg: "Please restart the system for the changes to take effect!"
#
# - name: Reboot system
#   hosts: localhost
#   connection: local
#   become: true
#   tasks:
#     - name: RebootSystem
#       ansible.builtin.import_tasks: tasks/basic_all/all_reboot.yml
#       # da hier local/pull --> geht nicht
#       # FAILED! => {"changed": false, "elapsed": 0, "msg": "Running reboot with local connection would reboot the control node.", "rebooted": false}
