# ####################
# ### grub2 bootloader
# ### ################

- name: Get stats of etc-default-grup (all)
  ansible.builtin.stat:
    path: /etc/default/grub
  register: etcdefgrub

- name: All settings misc - Enable GRUB Menu at boot (Archlinux)
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    # regexp: '^#GRUB_ENABLE_CRYPTODISK.*'
    insertafter: '^#GRUB_ENABLE_CRYPTODISK.*'
    line: 'GRUB_ENABLE_CRYPTODISK=y'
    state: present
    backup: true
  when:
    - ansible_distribution == "Archlinux"
    - etcdefgrub.stat.exists

# https://www.fosslinux.com/46741/things-to-do-after-installing-manjaro.htm
# - aus Punkt 13: Install the Latest Kernel (or an Older LTS Kernel)
- name: All settings misc - Enable GRUB Menu at boot (Archlinux)
  ansible.builtin.shell:
    cmd: sudo sed -Ei '/GRUB_TIMEOUT_STYLE=hidden/s/hidden/menu/' /etc/default/grub
  when:
    - ansible_distribution == "Archlinux"
    - etcdefgrub.stat.exists

- name: All settings misc - Update grub.cfg (Archlinux)
  ansible.builtin.shell:
    cmd: sudo grub-mkconfig -o /boot/grub/grub.cfg
    # sudo update-grub   # update-grub nicht stdm. Inst bei Archlinux
  when:
    - ansible_distribution == "Archlinux"
    - etcdefgrub.stat.exists


# ##########################################
# ### bashrc - add additional Paths + Config
# ### ######################################
# - global wäre: /etc/bash_bashrc

# -------------
# ### env_user:
- name: All settings misc - Bashrc - check status .bashrc (User, all)
  ansible.builtin.stat:
    path: "/home/{{ env_user }}/.bashrc"
  register: stat_bashrc_user

- name: All settings misc - Bashrc - create (User, all)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.bashrc"
    state: touch
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw,g=r,o=r
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    - not stat_bashrc_user.stat.exists   # oder: - stat_bashrc_user.stat.exists == false

- name: All settings misc - Bashrc - Insert/Update additional paths and config - starship shell prompt (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'starship shell prompt' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----------------------------------------------
      # starship shell prompt - init script + functions
      # -----------------------------------------------
      eval "$(starship init bash)"

      function set_win_title(){
        echo -ne "\033]0; $USER@$HOSTNAME:$PWD \007"
      }

      starship_precmd_user_func="set_win_title"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All settings misc - config all settings - copy starship shell prompt config file (User, all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.copy:
    src: files/config_all-settings-misc-starship2.toml
    dest: "/home/{{ env_user }}/.config/starship.toml"
    mode: '0644'
    backup: true
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All settings misc - Bashrc - additional EXPORTS (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'additional EXPORTS' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------
      # additional EXPORTS 
      # ------------------
      # https://github.com/ChrisTitusTech/mybash/blob/main/.bashrc
      iatest=$(expr index "$-" i)

      # Don't put duplicate lines in the history and do not add lines that start with a space
      export HISTCONTROL=erasedups:ignoredups:ignorespace

      # Check the window size after each command and, if necessary, update the values of LINES and COLUMNS
      #shopt -s checkwinsize

      # Causes bash to append to history instead of overwriting it so if you start a new terminal, you have old session history
      shopt -s histappend
      #PROMPT_COMMAND='history -a'

      # Show auto-completion list automatically, without double tab (einfacher tab genügt)
      if [[ $iatest -gt 0 ]]; then bind "set show-all-if-ambiguous On"; fi
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All settings misc - Bashrc - custom alias definitions (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'custom alias definitions' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------
      # custom alias definitions
      # ------------------------

      # KITTY - alias to be able to use kitty features when connecting to remote servers (e.g use tmux on remote server)
      alias kssh="kitty +kitten ssh"

      # directory listing (+ using 'exa' instead of 'ls')
      alias ls='exa --color=auto --icons --group --time-style=long-iso'   # '--group' und '--time-style' nur bei '-l'; dann schon dabei
      alias ll='ls -la --ignore-glob ..'            # show long listing of all except ".."
      alias l='ls -la --ignore-glob .?*'            # show long listing but no hidden dotfiles except "." (rekursiv bis 1. Unterverzeichnis, mit dessen Inhalt)
      # tree-view:
      alias lst='ls --tree'           # lst = ls tree
      alias lstl='lst --long'         # lstl = ls tree long
      alias lstla='lstl --all'        # lstla = ls tree long all
      alias lstlale='lstla --level'   # lstlale = ls tree long all level   # Aufruf: lstlale 3
      alias lstle='lst --level'       # lstle = ls tree level              # Aufruf: lstle 3   (entspricht: ls --tree --level 3)
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All settings misc - Bashrc - Insert/Update additional paths and config - nvm (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'nvm' - ANSIBLE MANAGED BLOCK ###"
    block: |
      # --------------------------
      # nvm (Node Version Manager)
      # --------------------------
      # https://github.com/nvm-sh/nvm
      # https://linuxize.com/post/how-to-install-node-js-on-ubuntu-22-04/
      #
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All settings misc - Bashrc - Insert/Update additional paths and config - vim (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'vim' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------
      # vim als Standard Editor setzen
      # -------------------------------
      export VISUAL=vim
      export EDITOR="${VISUAL}"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All settings misc - Bashrc - Insert/Update additional paths and config - user-bin (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'user-bin' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------------------
      # Benutzer-bin Verzeichnis an PATH anhängen:
      # ------------------------------------------
      export PATH=~/.local/bin:$PATH
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All settings misc - Bashrc - Insert/Update additional paths and config - pyenv (User, Ubuntu)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'pyenv' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # pyenv
      # -----
      # https://ostechnix.com/pyenv-python-version-management-made-easier/
      #
      export PATH="$HOME/.pyenv/bin:$PATH"
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
  when:
    - ansible_distribution in ["Ubuntu"]

# - name: All settings misc - Bashrc - initial command 'pyenv init' - pyenv (User, Arch)
#  become: true
#  become_user: "{{ env_user }}"
#  ansible.builtin.shell:
#    cmd: pyenv init >/dev/null && touch /home/{{ env_user }}/.pyenvinitExecuted
# args:
#    creates: /home/{{ env_user }}/.pyenvinitExecuted
#  ignore_errors: true
#  when:
#    - ansible_distribution in ["Archlinux"]

- name: All settings misc - Bashrc - Insert/Update additional paths and config - pyenv (User, Arch)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'pyenv' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # pyenv
      # -----
      export PYENV_ROOT="$HOME/.pyenv"
      command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
  when:
    - ansible_distribution in ["Archlinux"]

# https://wiki.archlinux.org/title/Systemd/User#PATH
- name: All settings misc - Bashrc - systemd user import-environment (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'systemd user' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # systemd user import-environment
      # -----
      systemctl --user import-environment PATH
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]


# --------
# ### root
- name: All settings misc - Bashrc - check status (root, all)
  ansible.builtin.stat:
    path: "/root/.bashrc"
  register: stat_bashrc_root

- name: All settings misc - Bashrc - create (root, all)
  ansible.builtin.file:
    path: "/root/.bashrc"
    state: touch
    mode: '0644'
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    - not stat_bashrc_root.stat.exists

- name: All settings misc - Bashrc - Insert/Update additional paths and config - starship shell prompt (root, all)
  ansible.builtin.blockinfile:
    path: "/root/.bashrc"
    backup: true
    marker: "### {mark} 'starship shell prompt' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -------------------------------------------
      # starship shell prompt - Add the init script
      # -------------------------------------------
      eval "$(starship init bash)"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All settings misc - Bashrc - Insert/Update additional paths and config (root, all)
  ansible.builtin.blockinfile:
    path: "/root/.bashrc"
    backup: true
    marker: "### {mark} 'vim' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------
      # vim als Standard Editor setzen
      # -------------------------------
      export VISUAL=vim
      export EDITOR="${VISUAL}"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]


# #######################################
# ### zsh - add additional Paths + Config
# ### ###################################
# - global wäre: /etc/zshrc   # https://linuxconfig.org/zsh-shell-installation-and-configuration-on-linux

# --------
# ### user
- name: All settings misc - Zshrc - check status .zshrc (User, all)
  ansible.builtin.stat:
    path: "/home/{{ env_user }}/.zshrc"
  register: statzshrcUser

- name: All settings misc - Zshrc - copy .zshrc - .zshrc.old (User, Manjaro)
  ansible.builtin.copy:
    src: "/home/{{ env_user }}/.zshrc"
    dest: "/home/{{ env_user }}/.zshrc.old"
    backup: true
  when: 
    - statzshrcUser.stat.exists == true
    - env_lsb_id == "ManjaroLinux"

- name: All settings misc - Zshrc - delete .zshrc (User, Manjaro)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.zshrc"
    state: absent
  when: 
    - statzshrcUser.stat.exists == true
    - env_lsb_id == "ManjaroLinux"

- name: All settings misc - Zshrc - touch (User, all)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.zshrc"
    state: touch
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw,g=r,o=r
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    # - not statzshrcUser.stat.exists
    # oder: - statzshrcUser.stat.exists == false

- name: All settings misc - Zshrc - Insert/Update additional paths and config - starship shell prompt (User,all
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'starship shell prompt' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -------------------------------------------
      # starship shell prompt - Add the init script
      # -------------------------------------------
      eval "$(starship init zsh)"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    # - env_lsb_id != "ManjaroLinux"  # bei Manjaro ist zsh pompt von Werk aus schon angepasst

# Übernommen + anpgepasst aus manjaro-zsh-config (/usr/share/zsh/manjaro-zsh-config)
# Anm.: zsh ist bei Manjaro die Standardshell und entsprechend vorkonfiguriert
# https://unix.stackexchange.com/questions/33255/how-to-define-and-load-your-own-shell-function-in-zsh
# https://zplugin.readthedocs.io/en/latest/zsh-plugin-standard/
#
# nicht mehr notwendig, da im nächsten task der INHALT von 'files/custom-zsh-config' in .zshrc reinkopiert wird
- name: All settings misc - Zshrc - copy custom zsh config file (User, all)
  ansible.builtin.copy:
    src: files/custom-zsh-config
    dest: /usr/share/zsh/custom-zsh-config
    owner: root
    group: root
    mode: '0644'
    backup: true
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    # - env_lsb_id != "ManjaroLinux"


# https://stackoverflow.com/questions/65020310/how-to-copy-file-content-to-another-file-in-ansible-without-overwriting-the-seco
# https://cloudlinuxtech.com/zsh-syntax-highlighting-autosuggestions/#How_to_install_the_zsh-syntax-highlighting_package_in_Linux
- name: All settings misc - Zshrc - Insert 'files/custom-zsh-config' in .zshrc (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'custom zsh config' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----------------
      # custom zsh config
      # -----------------
      "{{ lookup('file', 'files/custom-zsh-config') }}"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    # - env_lsb_id != "ManjaroLinux"

# Zeichenfolge '"<feff>' wurde vor Inhalt aus 'files/custom-zsh-config' eingefügt
# U+FEFF was called a ZERO WIDTH NO-BREAK SPACE
# Also, a quick trip to Wikipedia told us about the actual uses for U+FEFF, more commonly known as Byte order mark or BOM
# --> Datei 'files/custom-zsh-config' war als UTF-8 mit BOM --> als 'normales' UTF-8 File ohne BOM gespeichert
# https://www.freecodecamp.org/news/a-quick-tale-about-feff-the-invisible-character-cd25cd4630e7/
# https://www.fileformat.info/info/unicode/char/feff/index.htm
#
# danach wurde noch ein '"' vor den Inhalt aus der Datei gesetezt. entfernt:
- name: All settings misc - Zshrc -  Delete '"' at beginnning of insterted text form 'custom-zsh-config' in .zshrc (User, all)
  ansible.builtin.replace:
    path: "/home/{{ env_user }}/.zshrc"
    regexp: '^"##'
    replace: '##'
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    # - env_lsb_id != "ManjaroLinux"

#- name: All settings misc - Zshrc - source cutom zsh config in .zshrc (User, all)
#  ansible.builtin.blockinfile:
#    path: "/home/{{ env_user }}/.zshrc"
#    backup: true
#    marker: "### {mark} 'source cutom zsh config' ANSIBLE MANAGED BLOCK ###"
#    block: |
#      # ------------------------
#      # source custom zsh config
#      # ------------------------
#      if [[ -e /usr/share/zsh/custom-zsh-config ]]; then
#        source /usr/share/zsh/custom-zsh-config
#      fi
#  when:
#    - ansible_distribution in ["Ubuntu", "Archlinux"]
#    # - env_lsb_id != "ManjaroLinux"


- name: All settings misc - Zshrc - custom alias definitions (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'custom alias definitions' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------
      # custom alias definitions
      # ------------------------

      # KITTY - alias to be able to use kitty features when connecting to remote servers (e.g use tmux on remote server)
      alias kssh="kitty +kitten ssh"

      # directory listing (+ using 'exa' instead of 'ls')
      alias ls='exa --color=auto --icons --group --time-style=long-iso'   # '--group' und '--time-style' nur bei '-l'; dann schon dabei
      alias ll='ls -la --ignore-glob ..'            # show long listing of all except ".."
      alias l='ls -la --ignore-glob .?*'            # show long listing but no hidden dotfiles except "." (rekursiv bis 1. Unterverzeichnis, mit dessen Inhalt)
      # tree-view:
      alias lst='ls --tree'           # lst = ls tree
      alias lstl='lst --long'         # lstl = ls tree long
      alias lstla='lstl --all'        # lstla = ls tree long all
      alias lstlale='lstla --level'   # lstlale = ls tree long all level   # Aufruf: lstlale 3
      alias lstle='lst --level'       # lstle = ls tree level              # Aufruf: lstle 3   (entspricht: ls --tree --level 3)
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All settings misc - Zshrc - Insert/Update additional paths and config - nvm (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'nvm' - ANSIBLE MANAGED BLOCK ###"
    block: |
      # --------------------------
      # nvm (Node Version Manager)
      # --------------------------
      # https://github.com/nvm-sh/nvm
      # https://linuxize.com/post/how-to-install-node-js-on-ubuntu-22-04/
      #
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All settings misc - Zshrc - Insert/Update additional paths and config - vim (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'vim' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------
      # vim als Standard Editor setzen
      # -------------------------------
      export VISUAL=vim
      export EDITOR="${VISUAL}"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All settings misc - Zshrc - Insert/Update additional paths and config - user-bin (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'user-bin' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------------------
      # Benutzer-bin Verzeichnis an PATH anhängen:
      # ------------------------------------------
      export PATH=~/.local/bin:$PATH
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All settings misc - Zshrc - Insert/Update additional paths and config - pyenv (User, Ubuntu)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'pyenv' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # pyenv
      # -----
      # https://ostechnix.com/pyenv-python-version-management-made-easier/
      #
      export PATH="$HOME/.pyenv/bin:$PATH"
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
  when:
    - ansible_distribution in ["Ubuntu"]

# - name: All settings misc - Zshrc - initial command 'pyenv init' - pyenv (User, Arch)
#  become: true
#  become_user: "{{ env_user }}"
#  ansible.builtin.shell:
#    cmd: pyenv init >/dev/null && touch /home/{{ env_user }}/.pyenvinitExecuted
#  args:
#    creates: /home/{{ env_user }}/.pyenvinitExecuted
#  ignore_errors: true
#  when:
#    - ansible_distribution in ["Archlinux"]

- name: All settings misc - Zshrc - Insert/Update additional paths and config - pyenv (User, Arch)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'pyenv' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # pyenv
      # -----
      export PYENV_ROOT="$HOME/.pyenv"
      command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
  when:
    - ansible_distribution in ["Archlinux"]

# https://wiki.archlinux.org/title/Systemd/User#PATH
- name: All settings misc - Zshrc - systemd user import-environment (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'systemd user' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # systemd user import-environment
      # -----
      systemctl --user import-environment PATH
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]


# --------
# ### root
- name: All settings misc - Zshrc - check status (root, all)
  ansible.builtin.stat:
    path: "/root/.zshrc"
  register: stat_bashrc_root

- name: All settings misc - Zshrc - create (root, all)
  ansible.builtin.file:
    path: "/root/.zshrc"
    state: touch
    mode: '0644'
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    - not stat_bashrc_root.stat.exists

- name: All settings misc - Zshrc - Insert/Update additional paths and config - starship shell prompt (root, all)
  ansible.builtin.blockinfile:
    path: "/root/.zshrc"
    backup: true
    marker: "### {mark} 'starship shell prompt' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -------------------------------------------
      # starship shell prompt - Add the init script
      # -------------------------------------------
      eval "$(starship init zsh)"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    # - env_lsb_id != "ManjaroLinux"  # bei Manjaro ist zsh bereits angepasst

- name: All settings misc - Zshrc - Insert/Update additional paths and config (root, all)
  ansible.builtin.blockinfile:
    path: "/root/.zshrc"
    backup: true
    marker: "### {mark} 'vim' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------
      # vim als Standard Editor setzen
      # -------------------------------
      export VISUAL=vim
      export EDITOR="${VISUAL}"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]


# #########################
# ### starship shell prompt
# #########################
- name: All settings misc - starship shell prompt - copy update-script to usr-local-bin (Arch, Ubuntu)
  ansible.builtin.copy:
    src: "files/config_all-settings-misc-starship_update.sh"
    dest: "/usr/local/bin/starship_update.sh"
    owner: root
    group: root
    mode: '0755'
    backup: true
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]


# #######
# ### zsh
# #######
- name: All settings misc - zsh plugin git update - bash-skript (Ubuntu)
  ansible.builtin.copy:
    src: "files/config_all-services-misc-zshpluginsgit_update.sh"
    dest: "/usr/local/bin/zshpluginsgit_update.sh"
    owner: root
    group: root
    mode: '0755'
    backup: true
  when:
    - ansible_distribution in ["Ubuntu"]

# fatal: detected dubious ownership in repository at '/usr/share/zsh/plugins/...; To add an exception:
- name: All settings misc - zsh plugin git repo - add safe.directory - autosuggestions (Ubuntu)
  ansible.builtin.shell: /usr/bin/git config --global --add safe.directory /usr/share/zsh/plugins/zsh-autosuggestions
  when:
    - ansible_distribution in ["Ubuntu"]

- name: All settings misc - zsh plugin git repo - add safe.directory - syntax-highlighting (Ubuntu)
  ansible.builtin.shell: /usr/bin/git config --global --add safe.directory /usr/share/zsh/plugins/zsh-syntax-highlighting
  when:
    - ansible_distribution in ["Ubuntu"]

- name: All settings misc - zsh plugin git repo - add safe.directory - history-substring-search (Ubuntu)
  ansible.builtin.shell: /usr/bin/git config --global --add safe.directory /usr/share/zsh/plugins/zsh-history-substring-search
  when:
    - ansible_distribution in ["Ubuntu"]


# #######
# ### vim
# #######

# ----------------
# ### VIM Settings

# alt:
# - name: All settings misc - set vim config for user env_user (.vimrc) (all)
#  ansible.builtin.script: "{{ env_PWD }}/tasks/config_all-settings-misc-vim.sh"
#  args:
#    creates: "/home/{{ env_user }}/.vimrc"

- name: All settings misc - Set vim global config (ubuntu)
  ansible.builtin.blockinfile:
    path: "/etc/vim/vimrc.local"
    backup: true
    create: true
    mode: '0644'
    marker: '" ### {mark} ANSIBLE MANAGED BLOCK ###'
    block: |
      " #
      " Vim5 and later versions support syntax highlighting.
      syntax on

      " If using a dark background within the editing area and syntax highlighting
      " turn on this option as well
      set background=dark

      " The following are commented out as they cause vim to behave a lot
      " differently from regular Vi. They are highly recommended though.
      set showcmd			" Show (partial) command in status line.
      set showmatch		" Show matching brackets.
      set ignorecase		" Do case insensitive matching
      set smartcase		" Do smart case matching
      set incsearch		" Incremental search
      set autowrite		" Automatically save before commands like :next and :make
      set hidden			" Hide buffers when they are abandoned
      set mouse=a			" Enable mouse usage (all modes)

      " weitere Settings:
      colorscheme koehler
      set number			" Show line numbers
      set ruler			" Show row and column ruler information
      " set list
      set nocompatible
      set tabstop=4		" show existing tab with 4 spaces width
      set shiftwidth=4	" Number of auto-indent spaces; when indentig with '>', use 4 spaces
      " set expandtab		" On pressing tab, insert spaces
      set hlsearch		" Highlight all search results
      set undolevels=1000	" Number of undo levels
      " #
  when:
    - ansible_distribution == "Ubuntu"


- name: All settings misc - Set vim global config (arch)
  ansible.builtin.blockinfile:
    path: "/etc/vimrc"
    backup: true
    marker: '" ### {mark} ANSIBLE MANAGED BLOCK ###'
    block: |
      " #
      " Vim5 and later versions support syntax highlighting.
      syntax on

      " If using a dark background within the editing area and syntax highlighting
      " turn on this option as well
      set background=dark

      " The following are commented out as they cause vim to behave a lot
      " differently from regular Vi. They are highly recommended though.
      set showcmd			" Show (partial) command in status line.
      set showmatch		" Show matching brackets.
      set ignorecase		" Do case insensitive matching
      set smartcase		" Do smart case matching
      set incsearch		" Incremental search
      set autowrite		" Automatically save before commands like :next and :make
      set hidden			" Hide buffers when they are abandoned
      set mouse=a			" Enable mouse usage (all modes)

      " weitere Settings:
      colorscheme koehler
      set number			" Show line numbers
      set ruler			" Show row and column ruler information
      " set list
      set nocompatible
      set tabstop=4		" show existing tab with 4 spaces width
      set shiftwidth=4	" Number of auto-indent spaces; when indentig with '>', use 4 spaces
      " set expandtab		" On pressing tab, insert spaces
      set hlsearch		" Highlight all search results
      set undolevels=1000	" Number of undo levels
      " #
  when:
    - ansible_distribution == "Archlinux"

# ---------------
# ### VIM plugins

# - https://github.com/dense-analysis/ale
- name: All settings misc - Create folder for vim git-plugins (all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell:
    cmd: mkdir -p /home/{{ env_user }}/.vim/pack/git-plugins/start
  args:
    creates: /home/{{ env_user }}/.vim/pack/git-plugins/start

- name: All settings misc - Install (git clone) vim plugin - Linter ALE (all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.git:
    repo: https://github.com/dense-analysis/ale.git
    dest: /home/{{ env_user }}/.vim/pack/git-plugins/start
    depth: 1
    update: true
    clone: true


# ##########
# ### ClamAV
# ##########

# ### clamd

- name: All settings misc - Set ClamAV - clamd global config - ExcludePath (arch, Ubuntu)
  ansible.builtin.blockinfile:
    path: "/etc/clamav/clamd.conf"
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - ExcludePath ###'
    block: |
      # Don't scan files and directories matching regex
      # This directive can be used multiple times
      # Default: scan all
      #ExcludePath ^/proc/
      #ExcludePath ^/sys/
      ExcludePath ^/home/.*/\.clam/quarantine
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

- name: All settings misc - Set ClamAV - clamd global config - Limits (arch, Ubuntu)
  ansible.builtin.blockinfile:
    path: "/etc/clamav/clamd.conf"
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - Limits ###'
    block: |
      # Files larger than this limit won't be scanned. Affects the input file itself
      # as well as files contained inside it (when the input file is an archive, a
      # document or some other kind of container).
      # Value of 0 disables the limit.
      # Note: disabling this limit or setting it too high may result in severe damage
      # to the system.
      # Technical design limitations prevent ClamAV from scanning files greater than
      # 2 GB at this time.
      # Default: 100M
      MaxFileSize 400M
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

# https://wiki.archlinux.org/title/Desktop_notifications#Bash
# https://wiki.archlinux.org/title/ClamAV
- name: All settings misc - Set ClamAV - clamd global config - VirusEvent - Desktop Notification (arch, Ubuntu)
  ansible.builtin.blockinfile:
    path: "/etc/clamav/clamd.conf"
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - VirusEvent ###'
    block: |
      # Execute a command when virus is found. In the command string %v will
      # be replaced with the virus name and %f will be replaced with the file name.
      # Additionally, two environment variables will be defined: $CLAM_VIRUSEVENT_FILENAME
      # and $CLAM_VIRUSEVENT_VIRUSNAME.
      # Default: no
      #VirusEvent /usr/local/bin/send_sms 123456789 "VIRUS ALERT: %v in %f"
      #VirusEvent /usr/bin/notify-send "VirusAlert: '${CLAM_VIRUSEVENT_VIRUSNAME}' in '${CLAM_VIRUSEVENT_FILENAME}'" "Virus found - notification." --icon=dialog-warning
      VirusEvent /etc/clamav/VirusEvent.sh
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

# https://wiki.archlinux.org/title/ClamAV
- name: All settings misc - Users - clamav - bash-skript VirusEvent - notify-send on signature found (Arch, Ubuntu)
  ansible.builtin.copy:
    src: "files/config_all-settings-misc-clamavVirusEvent.sh"
    dest: "/etc/clamav/VirusEvent.sh"
    owner: root
    group: root
    mode: '0755'
    backup: true
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

- name: All settings misc - Users - clamav - serevices - bashScript to scan HOME folder (Arch, Ubuntu)
  ansible.builtin.copy:
    src: "files/config_all-services-misc-clamav-scanHome.sh"
    dest: "/usr/local/bin/scanHome.sh"
    owner: root
    group: root
    mode: '0755'
    backup: true
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]


# ### custom folders (quarantine, logs)

- name: All settings misc - Create 'quarantine' and 'logs' folder for ClamAV for env_user (Archlinux, Ubuntu)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/{{ item }}"
    state: directory
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: '0755'
  loop:
    - .clam/logs
    - .clam/quarantine
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]


# #############################################
# # reflector - retrieve the latest mirror list
# #############################################
# Service: siehe "config_all-services-misc.yml"
- name: All settings misc - reflector - insert countries (Arch, NOT Manjaro)
  ansible.builtin.replace:
    path: /etc/xdg/reflector/reflector.conf
    #search_string: '# --country France,Germany'
    regexp: '^# --country France,Germany'
    replace: '--country Germany,France,Austria,Switzerland,Netherlands,Belgium,Sweden'
    backup: true
  when:
    - ansible_distribution in ["Archlinux"]
    - env_lsb_id != "ManjaroLinux"

- name: All settings misc - reflector - how many mirrors to use (Arch, NOT Manjaro)
  ansible.builtin.replace:
    path: /etc/xdg/reflector/reflector.conf
    #search_string: '--latest 5'
    regexp: '^--latest 5'
    replace: '--latest 8'
    backup: true
  when:
    - ansible_distribution in ["Archlinux"]
    - env_lsb_id != "ManjaroLinux"
# Anm:  Manjaro hat eigenen systemd Timer/Service dafür:
#       /usr/lib/systemd/system/pamac-mirrorlist.timer
#       /usr/lib/systemd/system/pamac-mirrorlist.service


# ###################################
# ### Visual Studio Code / Code - OSS
# ###################################

- name: All settings misc - Start 'Visual Studio Code' bzw 'Code-OSS' (Ubuntu)
  tags: workstation,ubuntu
  ansible.builtin.shell:
    cmd: code >/dev/null 2>&1 &   # damit im Home-Verzeichnis der Config-Pfad von VS Code erstellt wird + später die settings.yml dorthin kopiert werden kann
  args:
      creates: "/home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings/settings.yml"   # nur ausführen, wenn nicht bereits z.B. in vorhergehendem Lauf gestartet/erstellt wurde
  become: true
  become_user: "{{ env_user }}"
  when:
    - ansible_distribution in ["Ubuntu"]

- name: All settings misc - Start 'Code - OSS' (Arch)
  tags: workstation,arch
  ansible.builtin.shell:
    cmd: code >/dev/null 2>&1 &   # damit im Home-Verzeichnis der Config-Pfad von VS Code erstellt wird + später die settings.yml dorthin kopiert werden kann
  args:
      creates: "/home/{{ env_user }}/.config/Code - OSS/User/globalStorage/zokugun.sync-settings/settings.yml"   # nur ausführen, wenn nicht bereits z.B. in vorhergehendem Lauf gestartet/erstellt wurde
  become: true
  become_user: "{{ env_user }}"
  when:
    - ansible_distribution in ["Archlinux"]

# muss manuell gemacht werden, da aktuell nicht automaitisiert funktioniert
# - name: All settings misc - Install 'Visual Studio Code' bzw 'Code-OSS' - Extension 'Sync Settings' by zokugun (Ubuntu)
#  tags: workstation,ubuntu
#  become: true
#  become_user: "{{ env_user }}"
#  ansible.builtin.shell:
#    cmd: code --install-extension zokugun.sync-settings
#  args:
#      creates: "/home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings/settings.yml"   # nur ausführen, wenn nicht bereits z.B. in vorhergehendem Lauf gestartet/erstellt wurde
#  when:
#    - ansible_distribution in ["Ubuntu"]   # hat unter Arch (mit ' Code - OSS') nicht funktioniert

# - name: All settings misc - Wait until 'Visual Studio Code' Extension 'Sync Settings' Standard Config-File is present before continuing (Ubuntu)
#  ansible.builtin.wait_for:
#    path: /home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings/settings.yml   #Datei
#    # path: /home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings/               # Ordner
#  when:
#    - ansible_distribution == "Ubuntu"

# # da sich die Extension unter Arch nicht so installieren lässt (s.o.) kann dies wegfallen:
# - name: All settings misc - Wait until 'Code - OSS' Extension 'Sync Settings' Standard Config-File is present before continuing (Arch)
#  ansible.builtin.wait_for:
#    path: "/home/{{ env_user }}/.config/Code - OSS/User/globalStorage/zokugun.sync-settings/settings.yml"   # Datei
#    #path: /home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings/               # Ordner
#  when:
#    - ansible_distribution == "Archlinux"

# # da sich die Extension unter Arch nicht so installieren lässt: Verzeichnis der Extension manuell erstellen,
# # damit unten die config-datei dorthin kopiert werden kann
- name: All settings misc - Erstelle hilfsweise manuell 'Sync Settings' Extension Ordner für 'Code - OSS' (Arch)
  tags: workstation,arch
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.config/Code - OSS//User/globalStorage/zokugun.sync-settings"
    state: directory
    mode: '0775'
  when:
    - ansible_distribution in ["Archlinux"]

# - name: All settings misc - Close Visual Studio Code (Ubuntu)
#  tags: workstation,ubuntu
#  ansible.builtin.shell:
#    cmd: pkill -15 code   # Signal: "-15" entspricht "SIGTERM" : Abschließen und beenden des Programms
#    #cmd: killall code
#  become: true
#  become_user: "{{ env_user }}"
#  when:
#    - ansible_distribution == "Ubuntu"

- name: All settings misc - Erstelle hilfsweise manuell 'Sync Settings' Extension Ordner für 'VS Code' (Ubuntu)
  tags: workstation,arch
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings"
    state: directory
    mode: '0775'
  when:
    - ansible_distribution in ["Ubuntu"]

- name: All settings misc - Set/Copy 'Visual Studio Code' settings-file for Extension 'Sync Settings' (Ubuntu)
  tags: workstation,ubuntu
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.copy:
    src: ./files/VSCode_Extension_Sync-Settings_settings.yml
    dest: "/home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings/settings.yml"   # Pfad bei Install des VS Code deb-Pakets (nicht bei flatpakod oder snap)
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw
  when:
    - ansible_distribution == "Ubuntu"

- name: All settings misc - Set/Copy 'Code - OSS' settings-file for Extension 'Sync Settings' (Arch)
  tags: workstation,arch
  ansible.builtin.copy:
    src: ./files/VSCode_Extension_Sync-Settings_settings.yml
    dest: "/home/{{ env_user }}/.config/Code - OSS//User/globalStorage/zokugun.sync-settings/settings.yml"   # Pfad bei Install des VS Code deb-Pakets (nicht bei flatpakod oder snap)
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw
  when:
    - ansible_distribution == "Archlinux"


# ########################
# ### Ulauncher extensions
# ########################

- name: All settings misc - ulauncher - create extension folder (all, env_user)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.local/share/ulauncher/extensions"
    state: directory
    mode: '0755'


- name: All settings misc - ulauncher - git clone extensions (all, env_user)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.git:
    repo: "{{ item.path }}"
    dest: "/home/{{ env_user }}/.local/share/ulauncher/extensions/{{ item.name }}"
    update: true
    clone: true
    #single_branch: true
    #version: "HEAD"   # default: "HEAD"
  loop:
    - { path: "https://github.com/Rapha149/ulauncher-bluetooth.git",              name: "ulauncher-bluetooth" }
    - { path: "https://github.com/tchar/ulauncher-albert-calculate-anything.git", name: "ulauncher-albert-calculate-anything" }
    - { path: "https://github.com/sergius02/ulauncher-colorconverter.git",        name: "ulauncher-colorconverter" }
    - { path: "https://github.com/Rapha149/ulauncher-deepl.git",                  name: "ulauncher-deepl" }
    - { path: "https://github.com/Ulauncher/ulauncher-emoji.git",                 name: "ulauncher-emoji" }
    - { path: "https://github.com/brpaz/ulauncher-faker.git",                     name: "ulauncher-faker" }
    - { path: "https://github.com/KuenzelIT/ulauncher-firefox-bookmarks.git",     name: "ulauncher-firefox-bookmarks" }
    - { path: "https://github.com/hillaryychan/ulauncher-fzf.git",                name: "ulauncher-fzf" }
    - { path: "https://github.com/friday/ulauncher-gnome-settings.git",           name: "ulauncher-gnome-settings" }
    - { path: "https://github.com/SeoFernando25/ulauncher-gpt.git",               name: "ulauncher-gnome-settings" }
    - { path: "https://github.com/pwnyprod/ulauncher-ipcopy.git",                 name: "ulauncher-ipcopy" }
    - { path: "https://github.com/brpaz/ulauncher-lipsum.git",                    name: "ulauncher-lipsum" }
    - { path: "https://github.com/RNairn01/ulauncher-meme-my-text.git",           name: "ulauncher-meme-my-text" }
    - { path: "https://github.com/melianmiko/ulauncher-nmcli.git",                name: "ulauncher-nmcli" }
    - { path: "https://github.com/mastdiekin/ulauncher-pypi-search.git",          name: "ulauncher-pypi-search" }
    - { path: "https://github.com/noam09/ulauncher-remmina.git",                  name: "ulauncher-remmina" }
    - { path: "https://github.com/lighttigerXIV/ulauncher-session-manager.git",   name: "ulauncher-session-manager" }
    - { path: "https://github.com/xRealNeon/SpritpreiseUlauncher.git",            name: "SpritpreiseUlauncher" }
    - { path: "https://github.com/jyvern/ulauncher-ssh.git",                      name: "ulauncher-ssh" }
    - { path: "https://github.com/rootwork/ulauncher-symbol.git",                 name: "ulauncher-symbol" }
    - { path: "https://github.com/lighttigerXIV/ulauncher-terminal-runner-extension.git", name: "ulauncher-terminal-runner-extension" }
    - { path: "https://github.com/Ulauncher/ulauncher-timer.git",                 name: "ulauncher-timer" }
    - { path: "https://github.com/brpaz/ulauncher-timestamp.git",                 name: "ulauncher-timestamp" }
    - { path: "https://github.com/dhelmr/ulauncher-tldr.git",                     name: "ulauncher-tldr" }
    - { path: "https://github.com/zensoup/ulauncher-unicode.git",                 name: "ulauncher-unicode" }
    - { path: "https://github.com/NastuzziSamy/ulauncher-youtube-search.git",     name: "ulauncher-youtube-search" }
#  when:
#    - ansible_distribution in ["Ubuntu"]
