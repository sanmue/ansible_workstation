# ####################
# ### grub2 bootloader
# ####################

- name: Get stats of etc-default-grub (all)
  ansible.builtin.stat:
    path: /etc/default/grub
  register: etcdefgrub

- name: All settings misc - Enable GRUB Menu at boot (Archlinux)
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    # regexp: '^#GRUB_ENABLE_CRYPTODISK.*'
    insertafter: "^#GRUB_ENABLE_CRYPTODISK.*"
    line: "GRUB_ENABLE_CRYPTODISK=y"
    state: present
    backup: true
  when:
    - ansible_distribution == "Archlinux"
    - etcdefgrub.stat.exists

# https://www.fosslinux.com/46741/things-to-do-after-installing-manjaro.htm
# - aus Punkt 13: Install the Latest Kernel (or an Older LTS Kernel)
- name: All settings misc - Enable GRUB Menu at boot (Archlinux)
  ansible.builtin.shell:
    cmd: sudo sed -Ei '/GRUB_TIMEOUT_STYLE=hidden/s/hidden/menu/' /etc/default/grub
  when:
    - ansible_distribution == "Archlinux"
    - etcdefgrub.stat.exists

- name: All settings misc - Update grub.cfg (Archlinux)
  ansible.builtin.shell:
    cmd: sudo grub-mkconfig -o /boot/grub/grub.cfg
  when:
    - ansible_distribution == "Archlinux"
    - etcdefgrub.stat.exists

# ##########
# ### Locale
# ##########

# insbes. wg. Debian (auf englisch installiert) und Formate auf Deutsch umstellen will
- name: All settings misc - Locale - modify /etc/locale.gen (de_DE.UTF-8 UTF-8) (all)
  ansible.builtin.replace:
    path: /etc/locale.gen
    regexp: "^# de_DE.UTF-8 UTF-8"
    replace: "de_DE.UTF-8 UTF-8"
    backup: true

- name: All settings misc - Locale - locale-gen (all)
  ansible.builtin.shell:
    cmd: locale-gen

# #######################
# ### /home/01_Videos-min
# #######################
- name: All settings misc - Create '/home/01_Videos-min' - env_user permission (all)
  ansible.builtin.file:
    path: "/home/01_Videos-min/"
    state: directory
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: "0710"

# #################################
# ### Starship - cross shell prompt
# #################################
# + s.u.: hook in .bahsrc + .zshrc

# starship update skript
- name: All settings misc - starship shell prompt - copy update-script to usr-local-bin (all)
  tags: shellrc
  ansible.builtin.copy:
    src: "files/config_all-settings-misc-starship_update.sh"
    dest: "/usr/local/bin/starship_update.sh"
    owner: root
    group: root
    mode: "0755"
    backup: true

# starship config
- name: All settings misc - starship - clone repo with starship.toml file (User, all)
  tags: shellrc
  ansible.builtin.git:
    repo: https://gist.github.com/71eb35991107cf691336bfbf60c96b9f.git # "owo" (modified)
    # repo: https://gist.github.com/f0ed97bed95c7bc7926cc3a88949bd39.git # "Power10"
    dest: "/home/{{ env_user }}/Downloads/starship"

- name: All settings misc - starship - copy starship.toml to .config dir (User, all)
  tags: shellrc
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.copy:
    src: "/home/{{ env_user }}/Downloads/starship/starship.toml"
    dest: "/home/{{ env_user }}/.config/starship.toml"
    mode: "0644"
    backup: true

- name: All settings misc - starship - remove local repo folder (User, all)
  tags: shellrc
  ansible.builtin.file:
    path: "/home/{{ env_user }}/Downloads/starship"
    state: absent

# ##########
# ### direnv
# ##########
# + s.u.: hook in .bahsrc + .zshrc
- name: All settings misc - direnv - create config folder (User, all)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.config/direnv"
    state: directory
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: "u=rwx,g=rx,o=rx"

- name: All settings misc - direnv - config (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.config/direnv/direnv.toml"
    create: true
    marker: "### {mark} 'direnv config' ANSIBLE MANAGED BLOCK ###"
    block: |
      [global]
      hide_env_diff = true
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rwx,g=rx,o=rx

# ##########################################
# ### bashrc - add additional Paths + Config
# ##########################################
# - global wäre: /etc/bash_bashrc

# -------------
# ### env_user:
- name: All settings misc - Bashrc - check status .bashrc (User, all)
  tags: shellrc
  ansible.builtin.stat:
    path: "/home/{{ env_user }}/.bashrc"
  register: stat_bashrc_user

- name: All settings misc - Bashrc - create (User, all)
  tags: shellrc
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.bashrc"
    state: touch
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw,g=r,o=r
  when:
    - not stat_bashrc_user.stat.exists

- name: All settings misc - Bashrc - Insert/Update additional paths and config - starship shell prompt (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'starship shell prompt' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----------------------------------------------
      # starship shell prompt - init script + functions
      # -----------------------------------------------
      eval "$(starship init bash)"

      function set_win_title(){
        echo -ne "\033]0; $USER@$HOSTNAME:$PWD \007"
      }

      starship_precmd_user_func="set_win_title"

- name: All settings misc - Bashrc - additional EXPORTS (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'additional EXPORTS' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------
      # additional EXPORTS
      # ------------------
      # https://github.com/ChrisTitusTech/mybash/blob/main/.bashrc
      # https://wiki.archlinux.org/title/Sudo#Colored_password_prompt
      iatest=$(expr index "$-" i)

      # Don't put duplicate lines in the history and do not add lines that start with a space
      export HISTCONTROL=erasedups:ignoredups:ignorespace

      # Check the window size after each command and, if necessary, update the values of LINES and COLUMNS
      #shopt -s checkwinsize

      # Causes bash to append to history instead of overwriting it so if you start a new terminal, you have old session history
      shopt -s histappend
      #PROMPT_COMMAND='history -a'

      # Show auto-completion list automatically, without double tab (einfacher tab genügt)
      if [[ $iatest -gt 0 ]]; then bind "set show-all-if-ambiguous On"; fi

      # Colored password prompt
      export SUDO_PROMPT="$(tput setaf 1 bold)[sudo]$(tput sgr0) password for $(tput setaf 6)%p$(tput sgr0): "

- name: All settings misc - Bashrc - custom alias definitions (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: false
    marker: "### {mark} 'custom alias definitions' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------
      # custom alias definitions
      # ------------------------

      # KITTY - alias to be able to use kitty features when connecting to remote servers (e.g use tmux on remote server)
      alias kssh="kitty +kitten ssh"

      # ls -> eza oder exa - list directory contents
      if [[ $(command -v eza) ]]; then
          alias ls='eza --color=auto --icons --group --time-style=long-iso --group-directories-first'
          # '--group' und '--time-style' nur bei '-l'; dann schon dabei
      elif [[ $(command -v exa) ]]; then
          alias ls='exa --color=auto --icons --group --time-style=long-iso --group-directories-first'
          # '--group' und '--time-style' nur bei '-l'; dann schon dabei
      else
          echo "Using standard ls, eza and exa not available" 1>/dev/null
      fi

      alias ll='ls -la --ignore-glob ..'            # show long listing of all except ".."
      alias l='ls -la --ignore-glob .?*'            # show long listing but no hidden dotfiles except "." (rekursiv bis 1. Unterverzeichnis, mit dessen Inhalt)
      # tree-view:
      alias lst='ls --tree'           # lst = ls tree
      alias lstl='lst --long'         # lstl = ls tree long
      alias lstla='lstl --all'        # lstla = ls tree long all
      alias lstlale='lstla --level'   # lstlale = ls tree long all level   # Aufruf: lstlale 3 (entspricht: ls --tree --long --all --level 3 )
      alias lstle='lst --level'       # lstle = ls tree level              # Aufruf: lstle 3   (entspricht: ls --tree --level 3)

      # lsblk - list block devices
      alias lsblku='lsblk -o NAME,MAJ:MIN,UUID,RM,SIZE,FSTYPE,RO,TYPE,MOUNTPOINTS' # u.a. mit UUID und FSTYPE
      alias lsblkf='lsblk --fs --paths' # u.a. mit: filesystem info, UUID und full device paths

      # cat -> bat # concatenate files and print on the standard output
      if [[ $(command -v bat) ]]; then
          alias cat='bat --plain' # --force-colorization
          alias catp='cat ----paging=never' # --force-colorization
          alias catn='bat --number' # --force-colorization
          alias catf='bat --style="full"' # --force-colorization
      fi

      # snapper-rollback
      if [[ $(command -v snapper-rollback) ]]; then
        alias snapshot='sudo snapper list && echo -e "\nsudo snapper -c root create -c number --description \"after snapper-rollback x\"\n"'
      fi

      # execute selected tasks of ansible playbook using 'tags'
      # - 'shellrc': create / update shell conf (e.g. .bashrc, .zshrc)
      alias upshellrc='sudo true && ansible-playbook "${HOME}/dev/Ansible/Projects/ansible_workstation/local.yml" -v -k --tags "shellrc"'
      # - 'vimrc': create / update vim conf + plugins
      alias upvimrc='sudo true && ansible-playbook "${HOME}/dev/Ansible/Projects/ansible_workstation/local.yml" -v -k --tags "vimrc"'
      # - 'nnnplugs': create / update 'nnn' plugins + xterm conf for nnn-peview-tui
      alias upnnnplugs='sudo true && ansible-playbook "${HOME}/dev/Ansible/Projects/ansible_workstation/local.yml" -v -k --tags "nnnplugs"'

- name: All settings misc - Bashrc - custom alias definitions - 'zoxide' (User, Arch)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: false
    marker: "### {mark} 'nvm' - ANSIBLE MANAGED BLOCK ###"
    block: |
      # -------------------------
      # zoxide ('cd' replacement)
      # -------------------------
      # TODO does not work on debian
      #
      # zoxide - A smarter cd command for your terminal (siehe auch unten; z = function)
      if [[ $(command -v zoxide) ]]; then
        alias cd='z'
        alias cdi='zi' # cd with interactive selection (using fzf)
      fi
  when:
    - ansible_distribution in ["Archlinux"]

- name: All settings misc - Bashrc - Insert/Update additional paths and config - nvm (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: false
    marker: "### {mark} 'nvm' - ANSIBLE MANAGED BLOCK ###"
    block: |
      # --------------------------
      # nvm (Node Version Manager)
      # --------------------------
      # https://github.com/nvm-sh/nvm
      # https://linuxize.com/post/how-to-install-node-js-on-ubuntu-22-04/
      #
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

- name: All settings misc - Bashrc - Insert/Update additional paths and config - vim (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: false
    marker: "### {mark} 'vim' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------
      # vim als Standard Editor setzen
      # -------------------------------
      export VISUAL=vim
      export EDITOR="${VISUAL}"
      export SUDO_EDITOR=rvim

- name: All settings misc - Bashrc - Insert/Update additional paths and config - user-bin (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: false
    marker: "### {mark} 'user-bin' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------------------
      # Benutzer-bin Verzeichnis an PATH anhängen:
      # ------------------------------------------
      export PATH=~/.local/bin:$PATH

- name: All settings misc - Bashrc - Insert/Update additional paths and config - pyenv (User, Debian)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: false
    marker: "### {mark} 'pyenv' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # pyenv
      # -----
      # https://ostechnix.com/pyenv-python-version-management-made-easier/
      #
      export PATH="$HOME/.pyenv/bin:$PATH"
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
  when:
    - ansible_distribution in ["Debian"]

# - name: All settings misc - Bashrc - initial command 'pyenv init' - pyenv (User, Arch)
#  tags: shellrc
#  become: true
#  become_user: "{{ env_user }}"
#  ansible.builtin.shell:
#    cmd: pyenv init >/dev/null && touch /home/{{ env_user }}/.pyenvinitExecuted
# args:
#    creates: /home/{{ env_user }}/.pyenvinitExecuted
#  ignore_errors: true
#  when:
#    - ansible_distribution in ["Archlinux"]

- name: All settings misc - Bashrc - Insert/Update additional paths and config - pyenv (User, Arch)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: false
    marker: "### {mark} 'pyenv' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # pyenv
      # -----
      export PYENV_ROOT="$HOME/.pyenv"
      command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
  when:
    - ansible_distribution in ["Archlinux"]

- name: All settings misc - Bashrc - Insert/Update additional paths and config - zoxide (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: false
    marker: "### {mark} 'zoxide' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------
      # zoxide
      # ------
      eval "$(zoxide init bash)"

# https://wiki.archlinux.org/title/Systemd/User#PATH
- name: All settings misc - Bashrc - systemd user import-environment (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: false
    marker: "### {mark} 'systemd user' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -------------------------------
      # systemd user import-environment
      # -------------------------------
      systemctl --user import-environment PATH

# https://github.com/direnv/direnv/blob/master/docs/hook.md
- name: All settings misc - Bashrc - direnv hook (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: false
    marker: "### {mark} 'direnv hook' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----------
      # direnv hook
      # -----------
      eval "$(direnv hook bash)"

# --------
# ### root
- name: All settings misc - Bashrc - check status (root, all)
  tags: shellrc
  ansible.builtin.stat:
    path: "/root/.bashrc"
  register: stat_bashrc_root

- name: All settings misc - Bashrc - create (root, all)
  tags: shellrc
  ansible.builtin.file:
    path: "/root/.bashrc"
    state: touch
    mode: "0644"
  when:
    - not stat_bashrc_root.stat.exists

- name: All settings misc - Bashrc - Insert/Update additional paths and config - starship shell prompt (root, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/root/.bashrc"
    backup: true
    marker: "### {mark} 'starship shell prompt' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -------------------------------------------
      # starship shell prompt - Add the init script
      # -------------------------------------------
      eval "$(starship init bash)"

- name: All settings misc - Bashrc - Insert/Update additional paths and config (root, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/root/.bashrc"
    backup: false
    marker: "### {mark} 'vim' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------
      # vim als Standard Editor setzen
      # -------------------------------
      export VISUAL=vim
      export EDITOR="${VISUAL}"
      export SUDO_EDITOR=rvim

# #######################################
# ### zsh - add additional Paths + Config
# #######################################
# - global wäre: /etc/zshrc   # https://linuxconfig.org/zsh-shell-installation-and-configuration-on-linux

# --------
# ### user
- name: All settings misc - Zshrc - check status .zshrc (User, all)
  tags: shellrc
  ansible.builtin.stat:
    path: "/home/{{ env_user }}/.zshrc"
  register: statzshrcUser

- name: All settings misc - Zshrc - copy .zshrc - .zshrc.old (User, all)
  tags: shellrc
  ansible.builtin.copy:
    src: "/home/{{ env_user }}/.zshrc"
    dest: "/home/{{ env_user }}/.zshrc.old"
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw,g=r,o=r
    backup: true
  when:
    - statzshrcUser.stat.exists

- name: All settings misc - Zshrc - delete .zshrc (User, all)
  tags: shellrc
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.zshrc"
    state: absent
  when:
    - statzshrcUser.stat.exists

- name: All settings misc - Zshrc - touch (User, all)
  tags: shellrc
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.zshrc"
    state: touch
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw,g=r,o=r

- name: All settings misc - Zshrc - Insert/Update additional paths and config - starship shell prompt (User,all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'starship shell prompt' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -------------------------------------------
      # starship shell prompt - Add the init script
      # -------------------------------------------
      eval "$(starship init zsh)"

# Übernommen + anpgepasst aus manjaro-zsh-config (/usr/share/zsh/manjaro-zsh-config)
# Anm.: zsh ist bei Manjaro die Standardshell und entsprechend vorkonfiguriert
# https://unix.stackexchange.com/questions/33255/how-to-define-and-load-your-own-shell-function-in-zsh
# https://zplugin.readthedocs.io/en/latest/zsh-plugin-standard/
#
# nicht mehr notwendig, da im nächsten task der INHALT von 'files/custom-zsh-config' in .zshrc reinkopiert wird
- name: All settings misc - Zshrc - copy custom zsh config file (User, all)
  tags: shellrc
  ansible.builtin.copy:
    src: files/custom-zsh-config
    dest: /usr/share/zsh/custom-zsh-config
    owner: root
    group: root
    mode: "0644"
    backup: false

# https://stackoverflow.com/questions/65020310/how-to-copy-file-content-to-another-file-in-ansible-without-overwriting-the-seco
# https://cloudlinuxtech.com/zsh-syntax-highlighting-autosuggestions/#How_to_install_the_zsh-syntax-highlighting_package_in_Linux
- name: All settings misc - Zshrc - Insert 'files/custom-zsh-config' in .zshrc (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: false
    marker: "### {mark} 'custom zsh config' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----------------
      # custom zsh config
      # -----------------
      "{{ lookup('file', 'files/custom-zsh-config') }}"

# Zeichenfolge '"<feff>' wurde vor Inhalt aus 'files/custom-zsh-config' eingefügt
# U+FEFF was called a ZERO WIDTH NO-BREAK SPACE
# Also, a quick trip to Wikipedia told us about the actual uses for U+FEFF, more commonly known as Byte order mark or BOM
# Datei 'files/custom-zsh-config' war als UTF-8 mit BOM --> als 'normales' UTF-8 File ohne BOM gespeichert
# https://www.freecodecamp.org/news/a-quick-tale-about-feff-the-invisible-character-cd25cd4630e7/
# https://www.fileformat.info/info/unicode/char/feff/index.htm
#
# danach wurde noch ein '"' vor den Inhalt aus der Datei gesetzt. entfernt:
- name: All settings misc - Zshrc -  Delete '"' at beginnning of insterted text form 'custom-zsh-config' in .zshrc (User, all)
  tags: shellrc
  ansible.builtin.replace:
    path: "/home/{{ env_user }}/.zshrc"
    regexp: '^"##'
    replace: "##"

# - name: All settings misc - Zshrc - source cutom zsh config in .zshrc (User, all)
#  tags: shellrc
#  ansible.builtin.blockinfile:
#    path: "/home/{{ env_user }}/.zshrc"
#    backup: true
#    marker: "### {mark} 'source cutom zsh config' ANSIBLE MANAGED BLOCK ###"
#    block: |
#      # ------------------------
#      # source custom zsh config
#      # ------------------------
#      if [[ -e /usr/share/zsh/custom-zsh-config ]]; then
#        source /usr/share/zsh/custom-zsh-config
#      fi

- name: All settings misc - Zshrc - additional EXPORTS - colored password prompt (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: false
    marker: "### {mark} 'additional EXPORTS' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------
      # additional EXPORTS
      # ------------------

      # Colored password prompt
      # https://wiki.archlinux.org/title/Sudo#Colored_password_prompt
      export SUDO_PROMPT="$(tput setaf 1 bold)[sudo]$(tput sgr0) password for $(tput setaf 6)%p$(tput sgr0): "

- name: All settings misc - Zshrc - custom alias definitions (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: false
    marker: "### {mark} 'custom alias definitions' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------
      # custom alias definitions
      # ------------------------

      # KITTY - alias to be able to use kitty features when connecting to remote servers (e.g use tmux on remote server)
      alias kssh="kitty +kitten ssh"

      # ls -> eza oder exa - list directory contents
      if [[ $(command -v eza) ]]; then
          alias ls='eza --color=auto --icons --group --time-style=long-iso --group-directories-first'
          # '--group' und '--time-style' nur bei '-l'; dann schon dabei
      elif [[ $(command -v exa) ]]; then
          alias ls='exa --color=auto --icons --group --time-style=long-iso --group-directories-first'
          # '--group' und '--time-style' nur bei '-l'; dann schon dabei
      else
          echo "Using standard ls, eza and exa not available" 1>/dev/null
      fi

      alias ll='ls -la --ignore-glob ..'            # show long listing of all except ".."
      alias l='ls -la --ignore-glob .?*'            # show long listing but no hidden dotfiles except "." (rekursiv bis 1. Unterverzeichnis, mit dessen Inhalt)
      # tree-view:
      alias lst='ls --tree'           # lst = ls tree
      alias lstl='lst --long'         # lstl = ls tree long
      alias lstla='lstl --all'        # lstla = ls tree long all
      alias lstlale='lstla --level'   # lstlale = ls tree long all level   # Aufruf: lstlale 3 (entspricht: ls --tree --long --all --level 3 )
      alias lstle='lst --level'       # lstle = ls tree level              # Aufruf: lstle 3   (entspricht: ls --tree --level 3)

      # lsblk - list block devices
      alias lsblku='lsblk -o NAME,MAJ:MIN,UUID,RM,SIZE,FSTYPE,RO,TYPE,MOUNTPOINTS' # u.a. mit UUID und FSTYPE
      alias lsblkf='lsblk --fs --paths' # u.a. mit: filesystem info, UUID und full device paths

      # cat -> bat # concatenate files and print on the standard output
      if [[ $(command -v bat) ]]; then
          alias cat='bat --plain' # --force-colorization
          alias catp='cat ----paging=never' # --force-colorization
          alias catn='bat --number' # --force-colorization
          alias catf='bat --style="full"' # --force-colorization
      fi

      # snapper-rollback
      if [[ $(command -v snapper-rollback) ]]; then
        alias snapshot='sudo snapper list && echo -e "\nsudo snapper -c root create -c number --description \"after snapper-rollback x\"\n"'
      fi

      # execute selected tasks of ansible playbook using 'tags'
      # - 'shellrc': create / update shell conf (e.g. .bashrc, .zshrc)
      alias upshellrc='sudo true && ansible-playbook "${HOME}/dev/Ansible/Projects/ansible_workstation/local.yml" -v -k --tags "shellrc"'
      # - 'vimrc': create / update vim conf + plugins
      alias upvimrc='sudo true && ansible-playbook "${HOME}/dev/Ansible/Projects/ansible_workstation/local.yml" -v -k --tags "vimrc"'
      # - 'nnnplugs': create / update 'nnn' plugins + xterm conf for nnn-peview-tui
      alias upnnnplugs='sudo true && ansible-playbook "${HOME}/dev/Ansible/Projects/ansible_workstation/local.yml" -v -k --tags "nnnplugs"'

- name: All settings misc - Zshrc - custom alias definitions - 'zoxide' (User, Arch)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: false
    marker: "### {mark} 'nvm' - ANSIBLE MANAGED BLOCK ###"
    block: |
      # -------------------------
      # zoxide ('cd' replacement)
      # -------------------------
      # TODO does not work on debian
      #
      # zoxide - A smarter cd command for your terminal (siehe auch unten; z = function)
      if [[ $(command -v zoxide) ]]; then
        alias cd='z'
        alias cdi='zi' # cd with interactive selection (using fzf)
      fi
  when:
    - ansible_distribution in ["Archlinux"]

- name: All settings misc - Zshrc - Insert/Update additional paths and config - nvm (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: false
    marker: "### {mark} 'nvm' - ANSIBLE MANAGED BLOCK ###"
    block: |
      # --------------------------
      # nvm (Node Version Manager)
      # --------------------------
      # https://github.com/nvm-sh/nvm
      # https://linuxize.com/post/how-to-install-node-js-on-ubuntu-22-04/
      #
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

- name: All settings misc - Zshrc - Insert/Update additional paths and config - vim (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: false
    marker: "### {mark} 'vim' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------
      # vim als Standard Editor setzen
      # -------------------------------
      export VISUAL=vim
      export EDITOR="${VISUAL}"
      export SUDO_EDITOR=rvim

- name: All settings misc - Zshrc - Insert/Update additional paths and config - user-bin (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: false
    marker: "### {mark} 'user-bin' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------------------
      # Benutzer-bin Verzeichnis an PATH anhängen:
      # ------------------------------------------
      export PATH=~/.local/bin:$PATH

- name: All settings misc - Zshrc - Insert/Update additional paths and config - pyenv (User, Debian)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: false
    marker: "### {mark} 'pyenv' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # pyenv
      # -----
      # https://ostechnix.com/pyenv-python-version-management-made-easier/
      #
      export PATH="$HOME/.pyenv/bin:$PATH"
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
  when:
    - ansible_distribution in ["Debian"]

# - name: All settings misc - Zshrc - initial command 'pyenv init' - pyenv (User, Arch)
#  tags: shellrc
#  become: true
#  become_user: "{{ env_user }}"
#  ansible.builtin.shell:
#    cmd: pyenv init >/dev/null && touch /home/{{ env_user }}/.pyenvinitExecuted
#  args:
#    creates: /home/{{ env_user }}/.pyenvinitExecuted
#  ignore_errors: true
#  when:
#    - ansible_distribution in ["Archlinux"]

- name: All settings misc - Zshrc - Insert/Update additional paths and config - pyenv (User, Arch)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: false
    marker: "### {mark} 'pyenv' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # pyenv
      # -----
      export PYENV_ROOT="$HOME/.pyenv"
      command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
  when:
    - ansible_distribution in ["Archlinux"]

- name: All settings misc - Zshrc - Insert/Update additional paths and config - zoxide (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: false
    marker: "### {mark} 'zoxide' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------
      # zoxide
      # ------
      eval "$(zoxide init zsh)"

- name: All settings misc - Zshrc - Insert/Update additional paths and conig - tilix - vte config (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: false
    marker: "### {mark} 'tilix' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------
      # tilix - vte config
      # ------------------
      # * https://gnunn1.github.io/tilix-web/manual/vteconfig/

      if ([ $TILIX_ID ] || [ $VTE_VERSION ]) && [[ -e /etc/profile.d/vte.sh ]]; then
        source /etc/profile.d/vte.sh
      fi

- name: All settings misc - Zshrc - Insert/Update additional paths and config - nnn (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: false
    marker: "### {mark} 'nnn' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ---------------------------
      # 'nnn' terminal file manager
      # ---------------------------
      # * https://github.com/jarun/nnn

      export NNN_FIFO='/tmp/nnn.fifo'
      export NNN_TERMINAL='xterm'
      export NNN_PLUG='d:diffs;o:fzopen;j:autojump;p:preview-tui;r:pdfread;u:getplugs;v:imgview'

      alias n='nnn_cdonquit -deiU -P p'
      # detailed; open txt in $VISUAL; show file info bar; show user+group; start Plugin 'p' (-> preview-tui)

      # --- cd on quit:
      # * https://github.com/jarun/nnn/wiki/Basic-use-cases#configure-cd-on-quit
      # * https://github.com/jarun/nnn/blob/master/misc/quitcd/quitcd.bash_sh_zsh

      nnn_cdonquit ()
      {
          # Block nesting of nnn in subshells
          [ "${NNNLVL:-0}" -eq 0 ] || {
              echo "nnn is already running"
              return
          }

          # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
          # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to
          # see. To cd on quit only on ^G, remove the "export" and make sure not to
          # use a custom path, i.e. set NNN_TMPFILE *exactly* as follows:
          NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"             # only 'cd on quit' when ^G
          # export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"    # always 'cd on quit'

          # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
          # stty start undef
          # stty stop undef
          # stty lwrap undef
          # stty lnext undef

          # The command builtin allows one to alias nnn to n, if desired, without
          # making an infinitely recursive alias
          command nnn "$@"

          [ ! -f "$NNN_TMPFILE" ] || {
              . "$NNN_TMPFILE"
              rm -f -- "$NNN_TMPFILE" > /dev/null
          }
      }

# https://wiki.archlinux.org/title/Systemd/User#PATH
- name: All settings misc - Zshrc - systemd user import-environment (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: false
    marker: "### {mark} 'systemd user' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -------------------------------
      # systemd user import-environment
      # -------------------------------
      systemctl --user import-environment PATH

# https://github.com/direnv/direnv/blob/master/docs/hook.md
- name: All settings misc - Zshrc - direnv hook (User, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: false
    marker: "### {mark} 'direnv hook' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----------
      # direnv hook
      # -----------
      eval "$(direnv hook zsh)"

# --------
# ### root
- name: All settings misc - Zshrc - check status (root, all)
  tags: shellrc
  ansible.builtin.stat:
    path: "/root/.zshrc"
  register: stat_bashrc_root

- name: All settings misc - Zshrc - create (root, all)
  ansible.builtin.file:
    path: "/root/.zshrc"
    state: touch
    mode: "0644"
  when:
    - not stat_bashrc_root.stat.exists

- name: All settings misc - Zshrc - Insert/Update additional paths and config - starship shell prompt (root, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/root/.zshrc"
    backup: true
    marker: "### {mark} 'starship shell prompt' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -------------------------------------------
      # starship shell prompt - Add the init script
      # -------------------------------------------
      eval "$(starship init zsh)"

- name: All settings misc - Zshrc - Insert/Update additional paths and config (root, all)
  tags: shellrc
  ansible.builtin.blockinfile:
    path: "/root/.zshrc"
    backup: false
    marker: "### {mark} 'vim' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------
      # vim als Standard Editor setzen
      # -------------------------------
      export VISUAL=vim
      export EDITOR="${VISUAL}"
      export SUDO_EDITOR=rvim

# #################
# ### nnn - plugins
# #################
# - https://github.com/jarun/nnn/tree/master/plugins#installation

- name: All settings misc - nnn - plugins - download install script (all, env_user)
  tags: nnnplugs
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs
    dest: "/home/{{ env_user }}/Downloads/getplugs.sh"
    mode: "0777"

- name: All settings misc - nnn - plugins - exec install script (all, env_user)
  tags: nnnplugs
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.script: "/home/{{ env_user }}/Downloads/getplugs.sh"

# ###############################
# ### xterm (wg. nnn preview-tui)
# ###############################
- name: All settings misc - xterm - touch (User, all)
  tags: nnnplugs
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.Xresources"
    state: touch
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw,g=r,o=r

- name: All settings misc - xterm - Insert/Update additional paths and config (User,all)
  tags: nnnplugs
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.Xresources"
    backup: true
    marker: "### {mark} 'xterm' ANSIBLE MANAGED BLOCK ###"
    block: |
      XTerm*background:   black
      XTerm*foreground:   white
      XTerm*renderFont:   true
      XTerm*faceName:     DejaVuSansMono
      XTerm*faceSize:     13

# #######
# ### zsh
# #######
- name: All settings misc - zsh plugin git update - bash-skript (Debian)
  tags: shellrc
  ansible.builtin.copy:
    src: "files/config_all-services-misc-zshpluginsgit_update.sh"
    dest: "/usr/local/bin/zshpluginsgit_update.sh"
    owner: root
    group: root
    mode: "0755"
    backup: true
  when: ansible_distribution in ["Debian"]

# fatal: detected dubious ownership in repository at '/usr/share/zsh/plugins/... # add an exception:
#
# git_config module instead of:
# become: true # ansible.builtin.shell: /usr/bin/git config --global --add safe.directory /usr/share/zsh/plugins/zsh-autosuggestions
# but: # add_mode: add # as of 11/2024 / ansible [core 2.14.16]: 'add_mode' not available
#
# - name: All settings misc - zsh plugin git repo - add safe.directory - autosuggestions (Debian)
#   tags: shellrc
#   become: true
#   community.general.git_config:
#     name: safe.directory
#     scope: global
#     value: "{{ item }}"
#     add_mode: add # as of 11/2024 / ansible [core 2.14.16]: 'add_mode' not available yet
#   loop:
#     - /usr/share/zsh/plugins/zsh-autosuggestions
#     - /usr/share/zsh/plugins/zsh-syntax-highlighting
#     - /usr/share/zsh/plugins/zsh-history-substring-search
#   when:
#     - ansible_distribution in ["Debian"]

- name: All settings misc - zsh plugin git repo - add safe.directory - autosuggestions (Debian)
  tags: shellrc # , skip_ansible_lint
  become: true
  ansible.builtin.shell: /usr/bin/git config --global --add safe.directory /usr/share/zsh/plugins/zsh-autosuggestions
  when:
    - ansible_distribution in ["Debian"]

- name: All settings misc - zsh plugin git repo - add safe.directory - syntax-highlighting (Debian)
  tags: shellrc # , skip_ansible_lint
  ansible.builtin.shell: /usr/bin/git config --global --add safe.directory /usr/share/zsh/plugins/zsh-syntax-highlighting
  when:
    - ansible_distribution in ["Debian"]

- name: All settings misc - zsh plugin git repo - add safe.directory - history-substring-search (Debian)
  tags: shellrc # , skip_ansible_lint
  ansible.builtin.shell: /usr/bin/git config --global --add safe.directory /usr/share/zsh/plugins/zsh-history-substring-search
  when:
    - ansible_distribution in ["Debian"]

# #######
# ### vim
# #######

# ----------------
# ### VIM Settings

- name: All settings misc - Set vim global config (Debian)
  tags: vimrc
  ansible.builtin.blockinfile:
    path: "/etc/vim/vimrc.local"
    backup: true
    create: true
    mode: "0644"
    marker: '" ### {mark} ANSIBLE MANAGED BLOCK ###'
    block: |
      " #
      syntax on           " Vim5 and later versions support syntax highlighting
      set background=dark " If dark background + syntax highlighting, turn on this option as well

      " The following cause vim to behave a lot differently from regular Vi.
      " They are highly recommended though.
      set showcmd     " Show (partial) command in status line.
      set showmatch   " Show matching brackets.
      set ignorecase  " Do case insensitive matching
      set smartcase   " Do smart case matching
      set incsearch   " Incremental search
      set autowrite   " Automatically save before commands like :next and :make
      set hidden      " Hide buffers when they are abandoned
      set mouse=a     " Enable mouse usage (all modes)

      colorscheme koehler
      set number      " Show line numbers
      set ruler       " Show row and column ruler information
      set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:·,nbsp:×
      " set list      " show white space characters " set manual in cmd mode: ':set list'
      " set nolist    " ':set nolist' in cmd mode to disable 'set list'
      set nocompatible
      set tabstop=4   " show existing tab with 4 spaces width
      set shiftwidth=4 " Number of auto-indent spaces; when indentig with '>', use 4 spaces
      set expandtab   " On pressing tab, insert spaces
      set smarttab    " <Tab> in front of a line inserts blanks
      set hlsearch    " Highlight all search results
      set undolevels=1000 " Number of undo levels
      " #
  when:
    - ansible_distribution == "Debian"

- name: All settings misc - Set vim global config (Arch)
  tags: vimrc
  ansible.builtin.blockinfile:
    path: "/etc/vimrc"
    backup: true
    marker: '" ### {mark} ANSIBLE MANAGED BLOCK ###'
    block: |
      " #
      syntax on           " Vim5 and later versions support syntax highlighting
      set background=dark " If dark background + syntax highlighting, turn on this option as well

      " The following cause vim to behave a lot differently from regular Vi.
      " They are highly recommended though.
      set showcmd     " Show (partial) command in status line.
      set showmatch   " Show matching brackets.
      set ignorecase  " Do case insensitive matching
      set smartcase   " Do smart case matching
      set incsearch   " Incremental search
      set autowrite   " Automatically save before commands like :next and :make
      set hidden      " Hide buffers when they are abandoned
      set mouse=a     " Enable mouse usage (all modes)

      colorscheme koehler
      set number      " Show line numbers
      set ruler       " Show row and column ruler information
      set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:·,nbsp:×
      " set list      " show white space characters " set manual in cmd mode: ':set list'
      " set nolist    " ':set nolist' in cmd mode to disable 'set list'
      set nocompatible
      set tabstop=4   " show existing tab with 4 spaces width
      set shiftwidth=4 " Number of auto-indent spaces; when indentig with '>', use 4 spaces
      set expandtab   " On pressing tab, insert spaces
      set smarttab    " <Tab> in front of a line inserts blanks
      set hlsearch    " Highlight all search results
      set undolevels=1000 " Number of undo levels
      " #
  when: ansible_distribution == "Archlinux"

# ---------------
# ### VIM plugins
#
# Anmerkung: package "vim-ale" ist installiert über paketmanager
#
# - manuelle Installation für env_user
# -
# - https://opensource.com/article/20/2/how-install-vim-plugins
# - https://github.com/vim/vim/blob/03c3bd9fd094c1aede2e8fe3ad8fd25b9f033053/runtime/doc/repeat.txt#L515

- name: All settings misc - Create folder for vim git-plugins (all)
  tags: vimrc
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell:
    cmd: "mkdir -p /home/{{ env_user }}/.vim/pack/git-plugins/start"
  args:
    creates: /home/{{ env_user }}/.vim/pack/git-plugins/start

- name: All settings misc - vim plugin install from git repo - nnn.vim (all)
  tags: vimrc
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.git:
    repo: "https://github.com/mcchrish/nnn.vim"
    dest: "/home/{{ env_user }}/.vim/pack/git-plugins/start/nnn.vim"
    depth: 1

- name: All settings misc - vim plugin install from git repo - Powerline (all)
  tags: vimrc
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.git:
    repo: "https://github.com/powerline/powerline.git"
    dest: "/home/{{ env_user }}/.vim/pack/git-plugins/start/powerline"

- name: All settings misc - vim plugin install from git repo - vim-airline (all)
  tags: vimrc
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.git:
    repo: "https://github.com/vim-airline/vim-airline.git"
    dest: "/home/{{ env_user }}/.vim/pack/git-plugins/start/vim-airline"

- name: All settings misc - vim plugin install from git repo - vim-fugitive (git) (all)
  tags: vimrc
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.git:
    repo: "https://github.com/tpope/vim-fugitive.git"
    dest: "/home/{{ env_user }}/.vim/pack/git-plugins/start/vim-fugitive"

# ##########
# ### ClamAV
# ##########

# ### clamd

- name: All settings misc - Set ClamAV - clamd global config - ExcludePath (all)
  ansible.builtin.blockinfile:
    path: "/etc/clamav/clamd.conf"
    backup: true
    create: true
    marker: "# ### {mark} ANSIBLE MANAGED BLOCK - ExcludePath ###"
    block: |
      # Don't scan files and directories matching regex
      # This directive can be used multiple times
      # Default: scan all
      #ExcludePath ^/proc/
      #ExcludePath ^/sys/
      ExcludePath ^/home/.*/\.clam/quarantine
    owner: root
    group: root
    mode: u=rw,g=r,o=r

- name: All settings misc - Set ClamAV - clamd global config - Limits (all)
  ansible.builtin.blockinfile:
    path: "/etc/clamav/clamd.conf"
    backup: true
    marker: "# ### {mark} ANSIBLE MANAGED BLOCK - Limits ###"
    block: |
      # Files larger than this limit won't be scanned. Affects the input file itself
      # as well as files contained inside it (when the input file is an archive, a
      # document or some other kind of container).
      # Value of 0 disables the limit.
      # Note: disabling this limit or setting it too high may result in severe damage
      # to the system.
      # Technical design limitations prevent ClamAV from scanning files greater than
      # 2 GB at this time.
      # Default: 100M
      MaxFileSize 400M

# https://wiki.archlinux.org/title/Desktop_notifications#Bash
# https://wiki.archlinux.org/title/ClamAV
- name: All settings misc - Set ClamAV - clamd global config - VirusEvent - Desktop Notification (all)
  ansible.builtin.blockinfile:
    path: "/etc/clamav/clamd.conf"
    backup: true
    marker: "# ### {mark} ANSIBLE MANAGED BLOCK - VirusEvent ###"
    block: |
      # Execute a command when virus is found. In the command string %v will
      # be replaced with the virus name and %f will be replaced with the file name.
      # Additionally, two environment variables will be defined: $CLAM_VIRUSEVENT_FILENAME
      # and $CLAM_VIRUSEVENT_VIRUSNAME.
      # Default: no
      #VirusEvent /usr/local/bin/send_sms 123456789 "VIRUS ALERT: %v in %f"
      #VirusEvent /usr/bin/notify-send "VirusAlert: '${CLAM_VIRUSEVENT_VIRUSNAME}' in '${CLAM_VIRUSEVENT_FILENAME}'" "Virus found - notification." --icon=dialog-warning
      VirusEvent /etc/clamav/VirusEvent.sh

# https://wiki.archlinux.org/title/ClamAV
- name: All settings misc - Users - clamav - bash-skript VirusEvent - notify-send on signature found (all)
  ansible.builtin.copy:
    src: "files/config_all-settings-misc-clamavVirusEvent.sh"
    dest: "/etc/clamav/VirusEvent.sh"
    owner: root
    group: root
    mode: "0755"
    backup: true

- name: All settings misc - Users - clamav - services - bashScript to scan HOME folder (all)
  ansible.builtin.copy:
    src: "files/config_all-services-misc-clamav-scanHome.sh"
    dest: "/usr/local/bin/scanHome.sh"
    owner: root
    group: root
    mode: "0755"
    backup: true

# ### custom folders (quarantine, logs)
- name: All settings misc - Create 'quarantine' and 'logs' folder for ClamAV for env_user (all)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/{{ item }}"
    state: directory
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: "0755"
  loop:
    - .clam/logs
    - .clam/quarantine

# #############################################
# # reflector - retrieve the latest mirror list
# #############################################
# Service: siehe "config_all-services-misc.yml"
- name: All settings misc - reflector - insert countries (Arch)
  ansible.builtin.replace:
    path: /etc/xdg/reflector/reflector.conf
    # search_string: '# --country France,Germany'
    regexp: "^# --country France,Germany"
    replace: "--country Germany,France,Austria,Switzerland,Netherlands,Belgium,Sweden"
    backup: true
  when:
    - ansible_distribution in ["Archlinux"]

- name: All settings misc - reflector - how many mirrors to use (Arch)
  ansible.builtin.replace:
    path: /etc/xdg/reflector/reflector.conf
    # search_string: '--latest 5'
    regexp: "^--latest 5"
    replace: "--latest 8"
    backup: true
  when:
    - ansible_distribution in ["Archlinux"]

# ######################
# ### Visual Studio Code
# ######################
# - Arch: will be installed later via chaotic-aur

# - name: All settings misc - Start 'Visual Studio Code' (all)
#   become: true
#   become_user: "{{ env_user }}"
#   ansible.builtin.shell:
#     cmd: code >/dev/null 2>&1 & # damit im Home-Verzeichnis der Config-Pfad von VS Code erstellt wird + später die settings.yml dorthin kopiert werden kann
#   args:
#     creates: "/home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings/settings.yml"
#     # nur ausführen, wenn nicht bereits z.B. in vorhergehendem Lauf gestartet/erstellt wurde

- name: All settings misc - Erstelle hilfsweise manuell 'Sync Settings' Extension Ordner für 'VS Code' (all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings"
    state: directory
    mode: "0775"

# Pfad bei Install des VS Code deb-Pakets (nicht bei flatpak oder snap)
- name: All settings misc - Set/Copy 'Visual Studio Code' settings-file for Extension 'Sync Settings' (all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.copy:
    src: ./files/VSCode_Extension_Sync-Settings_settings.yml
    dest: "/home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings/settings.yml"
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw

# - name: All settings misc - Close Visual Studio Code (all)
#   become: true
#   become_user: "{{ env_user }}"
#   ansible.builtin.shell:
#     cmd: pkill -15 code # Signal: "-15" entspricht "SIGTERM" : Abschließen und beenden des Programms
#     # cmd: killall code

# ########################
# ### Ulauncher extensions
# ########################

- name: All settings misc - ulauncher - create extension folder (all, env_user)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.local/share/ulauncher/extensions"
    state: directory
    mode: "0755"

- name: All settings misc - ulauncher - git clone extensions (all, env_user)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.git:
    repo: "{{ item.path }}"
    dest: "/home/{{ env_user }}/.local/share/ulauncher/extensions/{{ item.name }}"
    update: true
    clone: true
    # single_branch: true
    # version: "HEAD"   # default: "HEAD"
  loop:
    - { path: "https://github.com/Rapha149/ulauncher-bluetooth.git", name: "ulauncher-bluetooth" }
    - { path: "https://github.com/tchar/ulauncher-albert-calculate-anything.git", name: "ulauncher-albert-calculate-anything" }
    - { path: "https://github.com/sergius02/ulauncher-colorconverter.git", name: "ulauncher-colorconverter" }
    - { path: "https://github.com/Rapha149/ulauncher-deepl.git", name: "ulauncher-deepl" }
    - { path: "https://github.com/Ulauncher/ulauncher-emoji.git", name: "ulauncher-emoji" }
    - { path: "https://github.com/brpaz/ulauncher-faker.git", name: "ulauncher-faker" }
    - { path: "https://github.com/KuenzelIT/ulauncher-firefox-bookmarks.git", name: "ulauncher-firefox-bookmarks" }
    - { path: "https://github.com/hillaryychan/ulauncher-fzf.git", name: "ulauncher-fzf" }
    - { path: "https://github.com/friday/ulauncher-gnome-settings.git", name: "ulauncher-gnome-settings" }
    - { path: "https://github.com/SeoFernando25/ulauncher-gpt.git", name: "ulauncher-gnome-settings" }
    - { path: "https://github.com/pwnyprod/ulauncher-ipcopy.git", name: "ulauncher-ipcopy" }
    - { path: "https://github.com/brpaz/ulauncher-lipsum.git", name: "ulauncher-lipsum" }
    - { path: "https://github.com/RNairn01/ulauncher-meme-my-text.git", name: "ulauncher-meme-my-text" }
    - { path: "https://github.com/melianmiko/ulauncher-nmcli.git", name: "ulauncher-nmcli" }
    - { path: "https://github.com/mastdiekin/ulauncher-pypi-search.git", name: "ulauncher-pypi-search" }
    - { path: "https://github.com/noam09/ulauncher-remmina.git", name: "ulauncher-remmina" }
    - { path: "https://github.com/lighttigerXIV/ulauncher-session-manager.git", name: "ulauncher-session-manager" }
    - { path: "https://github.com/xRealNeon/SpritpreiseUlauncher.git", name: "SpritpreiseUlauncher" }
    - { path: "https://github.com/jyvern/ulauncher-ssh.git", name: "ulauncher-ssh" }
    - { path: "https://github.com/rootwork/ulauncher-symbol.git", name: "ulauncher-symbol" }
    - { path: "https://github.com/lighttigerXIV/ulauncher-terminal-runner-extension.git", name: "ulauncher-terminal-runner-extension" }
    - { path: "https://github.com/Ulauncher/ulauncher-timer.git", name: "ulauncher-timer" }
    - { path: "https://github.com/brpaz/ulauncher-timestamp.git", name: "ulauncher-timestamp" }
    - { path: "https://github.com/dhelmr/ulauncher-tldr.git", name: "ulauncher-tldr" }
    - { path: "https://github.com/zensoup/ulauncher-unicode.git", name: "ulauncher-unicode" }
    - { path: "https://github.com/NastuzziSamy/ulauncher-youtube-search.git", name: "ulauncher-youtube-search" }

# ##########
# ### rclone
# ##########
- name: All settings misc - rclone - create folder .local/bin for pCloud-Mnt.sh (all, env_user)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.local/bin"
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: "0755"
    state: directory

- name: All settings misc - rclone - copy script to mount pcloud (all, env_user)
  ansible.builtin.copy:
    src: files/config_all-settings-misc-rclone_pCloud-Mnt.sh
    dest: "/home/{{ env_user }}/.local/bin/rclone_pCloud-Mnt.sh"
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: "0755"
