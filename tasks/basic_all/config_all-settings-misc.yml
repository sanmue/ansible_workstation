# ####################
# ### grub2 bootloader
# ### ################

# https://www.fosslinux.com/46741/things-to-do-after-installing-manjaro.htm
# - aus Punkt 13: Install the Latest Kernel (or an Older LTS Kernel)
- name: Enable GRUB Menu at boot (Archlinux)
  ansible.builtin.shell:
    # cmd: sudo sed -Ei '/GRUB_TIMEOUT_STYLE=hidden/s/hidden/menu/' /etc/default/grub && sudo update-grub   # update-grup nicht stdm. Inst bei Archlinux
    cmd: sudo sed -Ei '/GRUB_TIMEOUT_STYLE=hidden/s/hidden/menu/' /etc/default/grub && sudo grub-mkconfig -o /boot/grub/grub.cfg
  when:
    - ansible_distribution == "Archlinux"


# ##########################################
# ### bashrc - add additional Paths + Config
# ### ######################################
# - global wäre: /etc/bash_bashrc

# -------------
# ### env_user:
- name: Bashrc - check status (User, all)
  ansible.builtin.stat:
    path: "/home/{{ env_user }}/.bashrc"
  register: stat_bashrc_user

- name: Bashrc - create (User, all)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.bashrc"
    state: touch
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw,g=r,o=r
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    - not stat_bashrc_user.stat.exists
    # oder: - stat_bashrc_user.stat.exists == false

- name: Bashrc - Insert/Update additional paths and config - starship shell prompt (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'starship shell prompt' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -------------------------------------------
      # starship shell prompt - Add the init script
      # -------------------------------------------
      eval "$(starship init bash)"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: Bashrc - Insert/Update additional paths and config - nvm (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'nvm' - ANSIBLE MANAGED BLOCK ###"
    block: |
      # --------------------------
      # nvm (Node Version Manager)
      # --------------------------
      # https://github.com/nvm-sh/nvm
      # https://linuxize.com/post/how-to-install-node-js-on-ubuntu-22-04/
      #
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: Bashrc - Insert/Update additional paths and config - vim (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'vim' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------
      # vim als Standard Editor setzen
      # -------------------------------
      export VISUAL=vim
      export EDITOR="${VISUAL}"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: Bashrc - Insert/Update additional paths and config - user-bin (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'user-bin' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------------------
      # Benutzer-bin Verzeichnis an PATH anhängen:
      # ------------------------------------------
      export PATH=/home/{{ env_user }}/.local/bin:$PATH
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: Bashrc - Insert/Update additional paths and config - pyenv (User, Ubuntu)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'pyenv' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # pyenv
      # -----
      # https://ostechnix.com/pyenv-python-version-management-made-easier/
      #
      export PATH="$HOME/.pyenv/bin:$PATH"
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
  when:
    - ansible_distribution in ["Ubuntu"]

# - name: Bashrc - initial command 'pyenv init' - pyenv (User, Arch)
#  become: true
#  become_user: "{{ env_user }}"
#  ansible.builtin.shell:
#    cmd: pyenv init >/dev/null && touch /home/{{ env_user }}/.pyenvinitExecuted
# args:
#    creates: /home/{{ env_user }}/.pyenvinitExecuted
#  ignore_errors: true
#  when:
#    - ansible_distribution in ["Archlinux"]

- name: Bashrc - Insert/Update additional paths and config - pyenv (User, Arch)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'pyenv' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # pyenv
      # -----
      export PYENV_ROOT="$HOME/.pyenv"
      command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
  when:
    - ansible_distribution in ["Archlinux"]

# https://wiki.archlinux.org/title/Systemd/User#PATH
- name: Bashrc - systemd user import-environment (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.bashrc"
    backup: true
    marker: "### {mark} 'systemd user' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # systemd user import-environment
      # -----
      systemctl --user import-environment PATH
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]


# --------
# ### root
- name: Bashrc - check status (root, all)
  ansible.builtin.stat:
    path: "/root/.bashrc"
  register: stat_bashrc_root

- name: Bashrc - create (root, all)
  ansible.builtin.file:
    path: "/root/.bashrc"
    state: touch
    mode: '0644'
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    - not stat_bashrc_root.stat.exists

- name: Bashrc - Insert/Update additional paths and config (root, all)
  ansible.builtin.blockinfile:
    path: "/root/.bashrc"
    backup: true
    marker: "### {mark} 'vim' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------
      # vim als Standard Editor setzen
      # -------------------------------
      export VISUAL=vim
      export EDITOR="${VISUAL}"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]


# #######################################
# ### zsh - add additional Paths + Config
# ### ###################################
# - global wäre: /etc/zshrc   # https://linuxconfig.org/zsh-shell-installation-and-configuration-on-linux

# --------
# ### user
- name: Zshrc - check status (User, all)
  ansible.builtin.stat:
    path: "/home/{{ env_user }}/.zshrc"
  register: statzshrcUser

- name: Zshrc - create (User, all)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.zshrc"
    state: touch
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw,g=r,o=r
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    - not statzshrcUser.stat.exists
    # oder: - statzshrcUser.stat.exists == false

- name: Zshrc - Insert/Update additional paths and config - nvm (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'nvm' - ANSIBLE MANAGED BLOCK ###"
    block: |
      # --------------------------
      # nvm (Node Version Manager)
      # --------------------------
      # https://github.com/nvm-sh/nvm
      # https://linuxize.com/post/how-to-install-node-js-on-ubuntu-22-04/
      #
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: Zshrc - Insert/Update additional paths and config - vim (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'vim' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------
      # vim als Standard Editor setzen
      # -------------------------------
      export VISUAL=vim
      export EDITOR="${VISUAL}"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: Zshrc - Insert/Update additional paths and config - user-bin (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'user-bin' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------------------
      # Benutzer-bin Verzeichnis an PATH anhängen:
      # ------------------------------------------
      export PATH=/home/{{ env_user }}/.local/bin:$PATH
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]

- name: Zshrc - Insert/Update additional paths and config - pyenv (User, Ubuntu)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'pyenv' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # pyenv
      # -----
      # https://ostechnix.com/pyenv-python-version-management-made-easier/
      #
      export PATH="$HOME/.pyenv/bin:$PATH"
      eval "$(pyenv init -)"
      eval "$(pyenv virtualenv-init -)"
  when:
    - ansible_distribution in ["Ubuntu"]

# - name: Zshrc - initial command 'pyenv init' - pyenv (User, Arch)
#  become: true
#  become_user: "{{ env_user }}"
#  ansible.builtin.shell:
#    cmd: pyenv init >/dev/null && touch /home/{{ env_user }}/.pyenvinitExecuted
#  args:
#    creates: /home/{{ env_user }}/.pyenvinitExecuted
#  ignore_errors: true
#  when:
#    - ansible_distribution in ["Archlinux"]

- name: Zshrc - Insert/Update additional paths and config - pyenv (User, Arch)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'pyenv' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # pyenv
      # -----
      export PYENV_ROOT="$HOME/.pyenv"
      command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
      eval "$(pyenv init -)"
  when:
    - ansible_distribution in ["Archlinux"]

# https://wiki.archlinux.org/title/Systemd/User#PATH
- name: Zshrc - systemd user import-environment (User, all)
  ansible.builtin.blockinfile:
    path: "/home/{{ env_user }}/.zshrc"
    backup: true
    marker: "### {mark} 'systemd user' ANSIBLE MANAGED BLOCK ###"
    block: |
      # -----
      # systemd user import-environment
      # -----
      systemctl --user import-environment PATH
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]


# --------
# ### root
- name: Zshrc - check status (root, all)
  ansible.builtin.stat:
    path: "/root/.zshrc"
  register: stat_bashrc_root

- name: Zshrc - create (root, all)
  ansible.builtin.file:
    path: "/root/.zshrc"
    state: touch
    mode: '0644'
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    - not stat_bashrc_root.stat.exists

- name: Zshrc - Insert/Update additional paths and config (root, all)
  ansible.builtin.blockinfile:
    path: "/root/.zshrc"
    backup: true
    marker: "### {mark} 'vim' ANSIBLE MANAGED BLOCK ###"
    block: |
      # ------------------------------
      # vim als Standard Editor setzen
      # -------------------------------
      export VISUAL=vim
      export EDITOR="${VISUAL}"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]


# #######
# ### vim
# #######

# ----------------
# ### VIM Settings

# alt:
# - name: set vim config for user "sandro" (.vimrc) (all)
#  ansible.builtin.script: "{{ env_PWD }}/tasks/config_all-settings-misc-vim.sh"
#  args:
#    creates: "/home/{{ env_user }}/.vimrc"


- name: Set vim global config (ubuntu)
  ansible.builtin.blockinfile:
    path: "/etc/vim/vimrc.local"
    backup: true
    marker: '" ### {mark} ANSIBLE MANAGED BLOCK ###'
    block: |
      " #
      " Vim5 and later versions support syntax highlighting.
      syntax on

      " If using a dark background within the editing area and syntax highlighting
      " turn on this option as well
      set background=dark

      " The following are commented out as they cause vim to behave a lot
      " differently from regular Vi. They are highly recommended though.
      set showcmd			" Show (partial) command in status line.
      set showmatch		" Show matching brackets.
      set ignorecase		" Do case insensitive matching
      set smartcase		" Do smart case matching
      set incsearch		" Incremental search
      set autowrite		" Automatically save before commands like :next and :make
      set hidden			" Hide buffers when they are abandoned
      set mouse=a			" Enable mouse usage (all modes)

      " weitere Settings:
      colorscheme koehler
      set number			" Show line numbers
      set ruler			" Show row and column ruler information
      " set list
      set nocompatible
      set tabstop=4		" show existing tab with 4 spaces width
      set shiftwidth=4	" Number of auto-indent spaces; when indentig with '>', use 4 spaces
      " set expandtab		" On pressing tab, insert spaces
      set hlsearch		" Highlight all search results
      set undolevels=1000	" Number of undo levels
      " #
  when:
    - ansible_distribution == "Ubuntu"


- name: Set vim global config (arch)
  ansible.builtin.blockinfile:
    path: "/etc/vimrc"
    backup: true
    marker: '" ### {mark} ANSIBLE MANAGED BLOCK ###'
    block: |
      " #
      " Vim5 and later versions support syntax highlighting.
      syntax on

      " If using a dark background within the editing area and syntax highlighting
      " turn on this option as well
      set background=dark

      " The following are commented out as they cause vim to behave a lot
      " differently from regular Vi. They are highly recommended though.
      set showcmd			" Show (partial) command in status line.
      set showmatch		" Show matching brackets.
      set ignorecase		" Do case insensitive matching
      set smartcase		" Do smart case matching
      set incsearch		" Incremental search
      set autowrite		" Automatically save before commands like :next and :make
      set hidden			" Hide buffers when they are abandoned
      set mouse=a			" Enable mouse usage (all modes)

      " weitere Settings:
      colorscheme koehler
      set number			" Show line numbers
      set ruler			" Show row and column ruler information
      " set list
      set nocompatible
      set tabstop=4		" show existing tab with 4 spaces width
      set shiftwidth=4	" Number of auto-indent spaces; when indentig with '>', use 4 spaces
      " set expandtab		" On pressing tab, insert spaces
      set hlsearch		" Highlight all search results
      set undolevels=1000	" Number of undo levels
      " #
  when:
    - ansible_distribution == "Archlinux"


# ---------------
# ### VIM plugins

# - https://github.com/dense-analysis/ale
- name: Create folder for vim git-plugins (all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell:
    cmd: mkdir -p /home/{{ env_user }}/.vim/pack/git-plugins/start
  args:
    creates: /home/{{ env_user }}/.vim/pack/git-plugins/start

- name: Install (git clone) vim plugin - Linter ALE (all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.git:
    repo: https://github.com/dense-analysis/ale.git
    dest: /home/{{ env_user }}/.vim/pack/git-plugins/start
    depth: 1
    update: true
    clone: true


# ##########
# ### ClamAV
# ##########

# ### clamd

- name: Set ClamAV - clamd global config - ExcludePath (arch, Ubuntu)
  ansible.builtin.blockinfile:
    path: "/etc/clamav/clamd.conf"
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - ExcludePath ###'
    block: |
      # Don't scan files and directories matching regex
      # This directive can be used multiple times
      # Default: scan all
      #ExcludePath ^/proc/
      #ExcludePath ^/sys/
      ExcludePath ^/home/.*/\.clam/quarantine
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

- name: Set ClamAV - clamd global config - Limits (arch, Ubuntu)
  ansible.builtin.blockinfile:
    path: "/etc/clamav/clamd.conf"
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - Limits ###'
    block: |
      # Files larger than this limit won't be scanned. Affects the input file itself
      # as well as files contained inside it (when the input file is an archive, a
      # document or some other kind of container).
      # Value of 0 disables the limit.
      # Note: disabling this limit or setting it too high may result in severe damage
      # to the system.
      # Technical design limitations prevent ClamAV from scanning files greater than
      # 2 GB at this time.
      # Default: 100M
      MaxFileSize 400M
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

# https://wiki.archlinux.org/title/Desktop_notifications#Bash
# https://wiki.archlinux.org/title/ClamAV
- name: Set ClamAV - clamd global config - VirusEvent - Desktop Notification (arch, Ubuntu)
  ansible.builtin.blockinfile:
    path: "/etc/clamav/clamd.conf"
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - VirusEvent ###'
    block: |
      # Execute a command when virus is found. In the command string %v will
      # be replaced with the virus name and %f will be replaced with the file name.
      # Additionally, two environment variables will be defined: $CLAM_VIRUSEVENT_FILENAME
      # and $CLAM_VIRUSEVENT_VIRUSNAME.
      # Default: no
      #VirusEvent /usr/local/bin/send_sms 123456789 "VIRUS ALERT: %v in %f"
      #VirusEvent /usr/bin/notify-send "VirusAlert: '${CLAM_VIRUSEVENT_VIRUSNAME}' in '${CLAM_VIRUSEVENT_FILENAME}'" "Virus found - notification." --icon=dialog-warning
      VirusEvent /etc/clamav/VirusEvent.sh
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

# https://wiki.archlinux.org/title/ClamAV
- name: Users - clamav - bash-skript VirusEvent - notify-send on signature found (Arch, Ubuntu)
  ansible.builtin.copy:
    src: "files/config_all-settings-misc-clamavVirusEvent.sh"
    dest: "/etc/clamav/VirusEvent.sh"
    owner: root
    group: root
    mode: '0755'
    backup: true
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

- name: Users - clamav - serevices - bashScript to scan HOME folder (Arch, Ubuntu)
  ansible.builtin.copy:
    src: "files/config_all-services-misc-clamav-scanHome.sh"
    dest: "/usr/local/bin/scanHome.sh"
    owner: root
    group: root
    mode: '0755'
    backup: true
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]


# ### custom folders (quarantine, logs)

- name: Create 'quarantine' and 'logs' folder for ClamAV for env_user (Archlinux, Ubuntu)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/{{ item }}"
    state: directory
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: '0755'
  loop:
    - .clam/logs
    - .clam/quarantine
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]


# ###################################
# ### Visual Studio Code / Code - OSS
# ###################################

- name: Install 'Visual Studio Code' bzw 'Code-OSS' - Extension 'Sync Settings' by zokugun (Ubuntu)
  tags: workstation,ubuntu
  ansible.builtin.shell:
    cmd: code --install-extension zokugun.sync-settings
  become: true
  become_user: "{{ env_user }}"
  when:
    - ansible_distribution in ["Ubuntu"]   # hat unter Arch (mit ' Code - OSS') nicht funktioniert

- name: Start 'Visual Studio Code' bzw 'Code-OSS' (Ubuntu)
  tags: workstation,ubuntu
  ansible.builtin.shell:
    cmd: code >/dev/null 2>&1 &   # damit im Home-Verzeichnis der Config-Pfad von VS Code erstellt wird + 
                                  # später die settings.yml dorthin kopiert werden kann
  args:
      creates: /home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings/settings.yml   # nur ausführen, wenn nicht bereits z.B. in vorhergehendem Lauf gestartet/erstellt wurde
  become: true
  become_user: "{{ env_user }}"
  when:
    - ansible_distribution in ["Ubuntu"]

- name: Start 'Code - OSS' (Arch)
  tags: workstation,arch
  ansible.builtin.shell:
    cmd: code >/dev/null 2>&1 &   # damit im Home-Verzeichnis der Config-Pfad von VS Code erstellt wird + 
                                  # später die settings.yml dorthin kopiert werden kann
  args:
      creates: "/home/{{ env_user }}/.config/Code - OSS/User/globalStorage/zokugun.sync-settings/settings.yml"   # nur ausführen, wenn nicht bereits z.B. in vorhergehendem Lauf gestartet/erstellt wurde
  become: true
  become_user: "{{ env_user }}"
  when:
    - ansible_distribution in ["Archlinux"]

- name: Wait until 'Visual Studio Code' Extension 'Sync Settings' Standard Config-File is present before continuing (Ubuntu)
  ansible.builtin.wait_for:
    path: /home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings/settings.yml   #Datei
    # path: /home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings/               # Ordner
  when:
    - ansible_distribution == "Ubuntu"

# # da sich die Extension unter Arch nicht so installieren lässt (s.o.) kann dies wegfallen:
# - name: Wait until 'Code - OSS' Extension 'Sync Settings' Standard Config-File is present before continuing (Arch)
#  ansible.builtin.wait_for:
#    path: "/home/{{ env_user }}/.config/Code - OSS/User/globalStorage/zokugun.sync-settings/settings.yml"   # Datei
#    #path: /home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings/               # Ordner
#  when:
#    - ansible_distribution == "Archlinux"

# # da sich die Extension unter Arch nicht so installieren lässt: Verzeichnis der Extension manuell erstellen,
# # damit unten die config-datei dorthin kopiert werden kann
- name: Erstelle hilfsweise manuell 'Sync Settings' Extension Ordner für 'Code - OSS' (Arch)
  tags: workstation,arch
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.config/Code - OSS//User/globalStorage/zokugun.sync-settings"
    state: directory
    mode: '0775'
  become: true
  become_user: "{{ env_user }}"
  when:
    - ansible_distribution in ["Archlinux"]


# - name: Close Visual Studio Code (Ubuntu)
#  tags: workstation,ubuntu
#  ansible.builtin.shell:
#    cmd: pkill -15 code   # Signal: "-15" entspricht "SIGTERM" : Abschließen und beenden des Programms
#    #cmd: killall code
#  become: true
#  become_user: "{{ env_user }}"
#  when:
#    - ansible_distribution == "Ubuntu"

- name: Set/Copy 'Visual Studio Code' settings-file for Extension 'Sync Settings' (Ubuntu)
  tags: workstation,ubuntu
  ansible.builtin.copy:
    src: ./files/VSCode_Extension_Sync-Settings_settings.yml
    dest: /home/{{ env_user }}/.config/Code/User/globalStorage/zokugun.sync-settings/settings.yml   # Pfad bei Install des VS Code deb-Pakets (nicht bei flatpakod oder snap)
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw
  when:
    - ansible_distribution == "Ubuntu"

- name: Set/Copy 'Code - OSS' settings-file for Extension 'Sync Settings' (Arch)
  tags: workstation,arch
  ansible.builtin.copy:
    src: ./files/VSCode_Extension_Sync-Settings_settings.yml
    dest: "/home/{{ env_user }}/.config/Code - OSS//User/globalStorage/zokugun.sync-settings/settings.yml"   # Pfad bei Install des VS Code deb-Pakets (nicht bei flatpakod oder snap)
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw
  when:
    - ansible_distribution == "Archlinux"
