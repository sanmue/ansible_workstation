# ######################
# ### Python pip install
# ######################
# python3-pip, python3-psutil, (python3-pyinotify): Installiert in packages_workstation-basic.yml

# - name: Install packages - pip (Python) (env_user, all, not EnveavourOS)
#   become: true
#   become_user: "{{ env_user }}"
#   ansible.builtin.pip:
#     state: present
#     name:
#       - deepl                     # Ulauncher Extension Requirement: DeepL Translator
#       - faker                     # Ulauncher Extension Requirement: Faker
#       - lorem                     # Ulauncher Extension Requirement: Lipsum
#       - parsedatetime             # Ulauncher Extension Requirement: Calculate Anything
#       - pint                      # Ulauncher Extension Requirement: Calculate Anything
#       - pydbus                    # Ulauncher Extension Requirement: Bluetooth
#       - simpleeval                # Ulauncher Extension Requirement: Calculate Anything
#       - wrapt_timeout_decorator   # Ulauncher Extension Requirement: Bluetooth
#     extra_args: --user
#   when:
#     - ansible_distribution in ["Archlinux", "Ubuntu"]
#     - env_lsb_id != "EndeavourOS"

# !!!
# - pyenv:
#   - https://technicalnavigator.in/how-to-fix-error-externally-managed-environment-in-python-kali-linux/
#
# - allgemein:
# - https://pythonspeed.com/articles/externally-managed-environment-pep-668/
# - https://stackoverflow.com/questions/75616371/sudo-pip-install-cryptography-error-externally-managed-environment
# - https://itsfoss.com/externally-managed-environment/#option-2-use-python-virtual-environment
# - https://stackoverflow.com/questions/75608323/how-do-i-solve-error-externally-managed-environment-everytime-i-use-pip3
# - https://stackoverflow.com/questions/75602063/pip-install-r-requirements-txt-is-failing-this-environment-is-externally-manag/75696359#75696359
# - https://peps.python.org/pep-0668/#mark-the-installation-as-externally-managed
# !!!

# pythonVersion=$(python --version | cut -d ' ' -f2)
- name: Install packages - pip - Get and register Python version (all)
  ansible.builtin.shell: python --version | cut -d ' ' -f2
  register: pythonVersion
  ignore_errors: true

- name: Install packages - pip - msg pythonVersion (env_user, all)
  ansible.builtin.debug:
    msg: "pythonVersion: {{ pythonVersion }}"

- name: Install packages - pip - pyenv install python (env_user, all)
  become: true
  become_user: "{{ env_user }}"
  # ansible.builtin.shell: "pyenv install {{ pythonVersion }} && touch /home/{{ env_user }}/.ansible_pyenvInst"
  ansible.builtin.shell: "pyenv install {{ pythonVersion }}"
  args:
    creates: "/home/{{ env_user }}/.ansible_pyenvInst"

- name: Install packages - pip - pyenv set global python version (env_user, all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: "pyenv global {{ pythonVersion }} && touch /home/{{ env_user }}/.ansible_pyenvInst"
  args:
    creates: "/home/{{ env_user }}/.ansible_pyenvInst"

# - name: Install packages - pip - upgrade pip (env_user, all)
#   become: true
#   become_user: "{{ env_user }}"
#   ansible.builtin.shell: pip install --upgrade pip

# für Ulauncher-Extensions:
# - name: Install packages - pip - verschiedene pakete (env_user, all)
#   become: true
#   become_user: "{{ env_user }}"
#   ansible.builtin.shell: pip install --user bs4 deepl faker htmlentities parsedatetime pint pydbus pytz simpleeval wrapt_timeout_decorator

- name: Install packages - pip - MsgInfo für Install versch. Pakete (env_user, all)
  ansible.builtin.debug:
    msg: "TODO: pip install --user bs4 deepl faker htmlentities parsedatetime pint pydbus pytz simpleeval wrapt_timeout_decorator"
