# ###########################
# ### pacman.conf - Archlinux
# ###########################
- name: Config Workstation addrepos - pacman.conf - activate Color (Archlinux)
  become: true
  ansible.builtin.lineinfile:
    path: "/etc/pacman.conf"
    regexp: '^#Color'
    line: 'Color'
    backup: true
  when:
    - ansible_distribution == "Archlinux"

- name: Config Workstation addrepos - pacman.conf - activate ParallelDownloads (Archlinux)
  become: true
  ansible.builtin.lineinfile:
    path: "/etc/pacman.conf"
    regexp: '^#ParallelDownloads.*'
    line: 'ParallelDownloads = 5'
    backup: true
  when:
    - ansible_distribution == "Archlinux"

# multilib: If you want to run 32 bit applications on your x86_64 system... # e.g. for 'steam'
- name: Config Workstation addrepos - pacman.conf - activate multilib repo - check status flagfile (Archlinux)
  ansible.builtin.stat:
    path: "/home/{{ env_user }}/.ansible_addrepoMultilib"
  register: addrepomultilib

- name: Config Workstation addrepos - pacman.conf - activate multilib repo - step1 (Archlinux)
  become: true
  ansible.builtin.lineinfile:
    path: "/etc/pacman.conf"
    regexp: '^#Include = /etc/pacman.d/mirrorlist'
    insertafter: '^#\[multilib\]'
    line: 'Include = /etc/pacman.d/mirrorlist'
  when:
    - ansible_distribution == "Archlinux"
    - addrepomultilib.stat.exists == false

- name: Config Workstation addrepos - pacman.conf - activate multilib repo - step2 (Archlinux)
  become: true
  ansible.builtin.lineinfile:
    path: "/etc/pacman.conf"
    regexp: '^#\[multilib\]'
    line: '[multilib]'
    backup: true
  when:
    - ansible_distribution == "Archlinux"
    - addrepomultilib.stat.exists == false

# modify /etc/pacman.d/mirrorlist to activate repo multilib needs to be done only once
- name: Config Workstation addrepos - pacman.conf - activate multilib repo - create flagfile (Archlinux)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: 
    cmd: "touch /home/{{ env_user }}/.ansible_addrepoMultilib"
  args:
    creates: "/home/{{ env_user }}/.ansible_addrepoMultilib"
  when:
    - ansible_distribution == "Archlinux"

# ### ########################
# ### Chaotic-AUR  - Archlinux
# ### ########################
# * https://aur.chaotic.cx/docs

# - name: Config Workstation addrepos - Chaotic-AUR - import key (Arch)
#   become: true
#   community.general.pacman_key:
#     id: 3056513887B78AEB
#     keyserver: keyserver.ubuntu.com
#   when:
#     - ansible_distribution == "Archlinux"
# *** Error:
# fatal: [localhost]: FAILED! => {"changed": false, "msg": "key ID is not full-length: 3056513887B78AEB"}

# * https://github.com/chaotic-aur/chaotic-aur-ansible/blob/main/roles/chaotic_aur/tasks/main.yml
- name: Config Workstation addrepos - Check if Chaotic-AUR is installed already (Arch)
  ansible.builtin.stat:
    path: /etc/pacman.d/chaotic-mirrorlist
  register: caur_exists
  when:
    - ansible_distribution == "Archlinux"

- name: Config Workstation addrepos - Retrieve Chaotic-AUR master key and sign it (Arch)
  ansible.builtin.shell:
    cmd: pacman-key --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com && pacman-key --lsign-key 3056513887B78AEB
  when:
    - ansible_distribution == "Archlinux"
    - caur_exists.stat.exists | default(true) == false			
 
- name: Config Workstation addrepos - Install Chaotic-AUR keyring and mirrorlist (Arch)
  community.general.pacman:
    name:
      - https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst
      - https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst
  when:
    - ansible_distribution == "Archlinux"
    - caur_exists.stat.exists | default(true) == false

- name: Config Workstation addrepos - Include chaotic-mirrorlist in pacman.conf (Arch)
  ansible.builtin.blockinfile:
    path: "/etc/pacman.conf"
    backup: true
    prepend_newline: true
    append_newline: true
#    insertafter: EOF
    marker: "### {mark} 'chaotic-aur' ANSIBLE MANAGED BLOCK ###"
    block: |
      [chaotic-aur]
      Include = /etc/pacman.d/chaotic-mirrorlist
  when:
    - ansible_distribution == "Archlinux"
    - caur_exists.stat.exists | default(true) == false
 
- name: Config Workstation addrepos - update_cache (pacman -Sy) (Arch)
  community.general.pacman:
    update_cache: true
  when: 
    - ansible_distribution == "Archlinux"
    - caur_exists.stat.exists | default(true) == false


# #####################################
# ### pamac.conf - Archlinux with Pamac
# #####################################
# - name: Config Workstation addrepos - Check if exists pamac.conf (Archlinux)
#   ansible.builtin.stat:
#     path: /etc/pamac.conf
#   register: pamac_conf
#   when:
#     - ansible_distribution == "Archlinux"

# - name: Config Workstation addrepos - Enable AUR support for pamac gui (Archlinux)
#   ansible.builtin.shell:
#     cmd: sudo sed -Ei '/EnableAUR/s/^#//' /etc/pamac.conf
#   when:
#     - ansible_distribution == "Archlinux"
#     - pamac_conf.stat.exists

# - name: Config Workstation addrepos - Enable check updates for AUR packages in pamac (Archlinux)
#   ansible.builtin.shell:
#     cmd: sudo sed -Ei '/CheckAURUpdates/s/^#//' /etc/pamac.conf
#   when:
#     - ansible_distribution == "Archlinux"
#     - pamac_conf.stat.exists

# ##########
# ### Ubuntu
# ##########

- name: Config Workstation addrepos - add repo for swtpm (apt, Ubuntu <22, not VM)   # wg. VM: Win11 (TPM 2.0)
  # https://launchpad.net/~smoser/+archive/ubuntu/swtpm
  # https://launchpad.net/~stefanberger/+archive/ubuntu/swtpm
  tags: workstation,ubuntu,addrepos,pre
  ansible.builtin.apt_repository:
    # repo: deb http://ppa.launchpad.net/smoser/swtpm/ubuntu focal main
    repo: ppa:smoser/swtpm
    state: present
    update_cache: true
  when:
    - ansible_pkg_mgr == "apt"
    - ansible_distribution == "Ubuntu"
    - ansible_distribution_major_version|int < 22
    - ansible_virtualization_role != "guest"
      # ab Ubuntu 22.04 ist swtpm anscheinend in Standard-Repo mit drin

# --- Firefox
# https://fostips.com/ubuntu-21-10-two-firefox-remove-snap/
#
# Anmerkung: wird aktuell nicht mehr benï¿½tigt, da als flatpak installiert wird
#
# - name: Config Workstation addrepos - add repo (Mozilla Team PPA) for Firefox (apt, Ubuntu >= 22)
#  tags: workstation,ubuntu,addrepos,pre
#  ansible.builtin.apt_repository:
#    repo: ppa:mozillateam/ppa
#    state: present
#    update_cache: yes
#  when:
#    - ansible_distribution == "Ubuntu"
#    - ansible_distribution_major_version|int >= 22
#    - ansible_pkg_mgr == "apt"

# - name: Config Workstation addrepos - Set PPA Priority for Mozillateam and block Firefox from Ubuntus own repository (Ubuntu >= 22)
#  ansible.builtin.script: "{{ env_PWD }}/tasks/basic_all/config_workstation-addrepos-ubuntu.sh"
#  when:
#    - ansible_distribution == "Ubuntu"
#    - ansible_distribution_major_version|int >= 22   # Ubuntu 22.04 has transitioned from using /etc/apt/trusted.gpg to
                                                      # using individual .gpg files located in /etc/apt/trusted.gpg.d
#    - env_desktop in ["gnome", "ubuntu:gnome"]
#    - "ansible_version.full is version('2.10.0', '>=')"   # 'ansible.builtin.script' ab ansible version 2.10 (welche bei Ubutnu 22.04 installiert wird)

# verhindern, dass Firefox Snap-Package wieder installiert wird bei update
- name: Config Workstation addrepos - block Firefox from Ubuntus own repository (Ubuntu >= 22)
  ansible.builtin.script: "{{ env_PWD }}/tasks/basic_all/config_workstation-addrepos-ubuntu.sh"
  when:
    - ansible_distribution == "Ubuntu"
    - ansible_distribution_major_version|int >= 22        # Ubuntu 22.04 has transitioned from using /etc/apt/trusted.gpg to
                                                          # using individual .gpg files located in /etc/apt/trusted.gpg.d
    - env_desktop in ["gnome", "ubuntu:gnome"]
    - "ansible_version.full is version('2.10.0', '>=')"   # 'ansible.builtin.script' ab ansible version 2.10 (welche bei Ubutnu 22.04 installiert wird)

# --- PowerShell
# https://learn.microsoft.com/de-de/powershell/scripting/install/installing-powershell-on-linux?view=powershell-5.1#ubuntu
# https://learn.microsoft.com/de-de/powershell/scripting/install/install-ubuntu?view=powershell-5.1#installation-via-package-repository
# https://www.ntweekly.com/2021/04/07/ansible-playbook-install-powershell-7-on-ubuntu-server-20-04/
# - name: Config Workstation addrepos - Download the Microsoft repository GPG keys (apt, Ubuntu LTS)
#   ansible.builtin.get_url:
#     url: "https://packages.microsoft.com/config/ubuntu/{{ env_lsb }}/packages-microsoft-prod.deb"
#     dest: /tmp/packages-microsoft-prod.deb
#     force_basic_auth: true
#   when:
#     - ansible_distribution == "Ubuntu"

# - name: Config Workstation addrepos - Register the Microsoft repository GPG keys (apt, Ubuntu)
#   ansible.builtin.command:
#     cmd: dpkg -i /tmp/packages-microsoft-prod.deb
#   when:
#     - ansible_distribution == "Ubuntu"

# neu: s.o.
# - name: Config Workstation addrepos - add repo for PowerShell (Ubuntu)
#  tags: workstation,ubuntu,addrepos,pre
#  ansible.builtin.apt_repository:
#    repo: "deb https://packages.microsoft.com/config/ubuntu/{{ env_lsb }}/packages-microsoft-prod.deb"
#    state: present
#    update_cache: yes
#  when:
#    - ansible_distribution == "Ubuntu"
