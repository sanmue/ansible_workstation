# ### TODO: aktualisieren/anpassen (siehe install_SWandConf.sh)

# - name: Install basic packages - Check if btrfs filesystem + register result in variable (all)
#   ansible.builtin.shell: mount | grep "^/dev" | grep "on / " | grep "btrfs"
#   register: rootFsIsBtrfs
#   ignore_errors: true

- name: Config all services misc - Check if / has btrfs filesystem + register result in variable (all)
  ansible.builtin.shell: stat -f -c %T /
  register: rootFsIsBtrfs
  ignore_errors: true

- name: Install basic packages - Get stats of etc-default-grup (all)
  ansible.builtin.stat:
    path: /etc/default/grub
  register: etcdefgrub

- name: Install basic packages for snapper on btrfs filesystem - snapper (Arch)
  ansible.builtin.package:
    state: present
    name:
      # ### for btrfs filesystem:
      - snapper      # A tool for managing BTRFS and LVM snapshots. It can create, diff and restore snapshots and provides timelined auto-snapping.
      # >>> You must create a default config with snapper cli named root first.
      # >>> Run 'snapper -c root create-config /' as root
  # with_items: ansible_mounts
  when:
    # - rootFsIsBtrfs != ''
    - rootFsIsBtrfs = 'btrfs'   # Variable aus packages_workstation-basic.yml; neu: s.o.
    - ansible_distribution in ["Archlinux"]

- name: Install basic packages for snapper on btrfs filesystem + grub - grub-btrfs (Arch)
  ansible.builtin.package:
    state: present
    name:
      # ### for btrfs filesystem:
      - grub-btrfs    # paketname bei Ubuntu (Standard) nicht vorhanden  # Include btrfs snapshots in GRUB boot options
      - inotify-tools # wird benötigt von btrfsd.service
      - snap-pac      # Pacman hooks that use snapper to create pre/post btrfs snapshots like openSUSE's YaST
      - snap-sync     # Use snapper snapshots to backup to external drive
  when:
    # - rootFsIsBtrfs != ''
    - rootFsIsBtrfs = 'btrfs'   # Variable aus packages_workstation-basic.yml; neu: s.o.
    - etcdefgrub.stat.exists
    - ansible_distribution in ["Archlinux"]

- name: Check if default snapper config 'root' for '/' already exists (Arch)
  ansible.builtin.shell: snapper list-configs | grep root
  register: snapperDefaultConfigExists
  ignore_errors: true
  when:
    # - rootFsIsBtrfs != ''
    - rootFsIsBtrfs = 'btrfs'   # Variable aus packages_workstation-basic.yml; neu: s.o.
    - ansible_distribution in ["Archlinux"]

# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/storage_administration_guide/ch-snapper
- name: Create a default config for '/' with snapper cli named 'root' (Arch, NOT Manjaro)
  ansible.builtin.shell: snapper --config root create-config / && touch /home/{{ env_user }}/.ansible_snapperDefaultRootConfigCreated
  # with_items: ansible_mounts
  args:
    creates: /home/{{ env_user }}/.ansible_snapperDefaultRootConfigCreated
  when:
    # - rootFsIsBtrfs != ''
    - rootFsIsBtrfs = 'btrfs'   # Variable aus packages_workstation-basic.yml; neu: s.o.
    # - snapperDefaultConfigExists == ''
    # - snapperDefaultConfigExists is not defined or snapperDefaultConfigExists == ''
    - ansible_distribution in ["Archlinux"]
    - env_lsb_id != "ManjaroLinux"   # 09.04.28: verursacht aktuell Problem bei Manjaro --> ggf. manuell nachholen, wenn wieder funktioniert

- name: Install additional packages for snapper on btrfs filesystem (Manjaro)
  ansible.builtin.package:
    name:
      - btrfs-assistant   # An application for managing BTRFS subvolumes and Snapper snapshots # für Archlinux/EndeavourOS: AUR
      # - timeshift-autosnap-manjaro
    state: present
  when:
    # - rootFsIsBtrfs != ''
    - rootFsIsBtrfs = 'btrfs'   # Variable aus packages_workstation-basic.yml; neu: s.o.
    - ansible_distribution in ["Archlinux"]
    - env_lsb_id == "ManjaroLinux"

#  verlagert an Schluss bootstrap.sh, da wg. Auswahlmöglichkeit ähnliches Paket nicht installiert wird
# - name: Install additional packages for snapper on btrfs filesystem (Archlinux, NOT Manjaro)
#   community.general.pacman:
#     name:
#       - btrfs-assistant   # An application for managing BTRFS subvolumes and Snapper snapshots
#     state: present
#     executable: yay
#     # extra_args: --aur
#   when:
    # - rootFsIsBtrfs != ''
    # - rootFsIsBtrfs = 'btrfs'   # Variable aus packages_workstation-basic.yml; neu: s.o.
#     - ansible_distribution in ["Archlinux"]
#     - env_lsb_id != "ManjaroLinux"

# in bootstrap.sh verschoben
#
# - name: Install additional packages for snapper on btrfs filesystem via pamac from AUR (Archlinux, NOT Manjaro)
#  ansible.builtin.shell: pamac build --no-confirm btrfs-assistant
#  args:
#    creates: "/home/{{ env_user }}/.ansible_pamacArchBasicPackages"
#  when:
#    - ansible_distribution in ["Archlinux"]
#    - env_lsb_id != "ManjaroLinux"
