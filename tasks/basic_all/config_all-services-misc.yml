# ##########
# ### System
# ##########
# systemweit


# -------------------------------------------
# ### grub-btrfsd - Regenerate grub-btrfs.cfg
# -------------------------------------------
# github.com/Antynea/grub-btrfs
- name: All services misc - start+enable grub-btrfsd (all)
  ansible.builtin.systemd:
    name: start+enable grub-btrfsd.service
    state: started
    enabled: true
    daemon_reload: true
  when:
    - rootFsIsBtrfs != ''     # Variable aus packages_workstation-basic.yml
    - etcdefgrub.stat.exists  # Status aus packages_workstation-basic.yml


# ---------------------
# ### cups OpenPrinting
# ---------------------
- name: All services misc - start+enable cronie (Arch)
  ansible.builtin.service:
    name: cups.service
    state: started
    enabled: true
  when: ansible_distribution in ["Archlinux"]


# ------
# Cronie
# ------
# cron wird verwendet von ClamTK und timeshift
#
# https://wiki.archlinux.org/title/Cron
- name: All services misc - start+enable cronie (Arch)
  ansible.builtin.service:
    name: cronie.service
    state: started
    enabled: true
  when: ansible_distribution in ["Archlinux"]


# ---------------------------------------------
# # reflector - retrieve the latest mirror list
# ---------------------------------------------
# https://man.archlinux.org/man/reflector.1#EXAMPLES
# https://wiki.archlinux.org/title/Reflector#top-page
# - conf: /etc/xdg/reflector/reflector.conf   -->   siehe config_all-settings-misc.yml
- name: All services misc - start+enable reflector (Arch, NOT Manjaro)
  ansible.builtin.service:
    name: reflector.service
    #state: started
    enabled: true
  when:
    - ansible_distribution in ["Archlinux"]
    - env_lsb_id != "ManjaroLinux"
# Anm:  Manjaro hat eigenen systemd Timer/Service dafür:
#       /usr/lib/systemd/system/pamac-mirrorlist.timer
#       /usr/lib/systemd/system/pamac-mirrorlist.service


# ------------
# # SSH / SSHD
# ------------
- name: All services misc - start ssh (Ubuntu)
  ansible.builtin.service:
    name: ssh
    state: started
  when: ansible_distribution in ["Ubuntu"]

- name: All services misc - enable ssh (Ubuntu)
  ansible.builtin.service:
    name: ssh
    enabled: true
  when: ansible_distribution in ["Ubuntu"]


- name: All services misc - start sshd (Archlinux)
  ansible.builtin.service:
    name: sshd
    state: started
  when: ansible_distribution in ["Archlinux"]

- name: All services misc - enable sshd (Archlinux)
  ansible.builtin.service:
    name: sshd
    enabled: true
  when: ansible_distribution in ["Archlinux"]


# --------
# # ClamAV
# --------

# ### Allgemein

# Arch-Wiki/ManjaroWiki: https://wiki.archlinux.org/title/ClamAV bzw. https://wiki.manjaro.org/index.php/ClamAV
# You will need to run freshclam before starting the service for the first time
# or you will run into trouble/errors which will prevent ClamAV from starting correctly.
#
# You may get a notification that clamd was not notified. This is normal because we haven't started the service yet.
#
- name: All services misc - Update clamav database (Arch)
  ansible.builtin.shell:
    cmd: freshclam
  args:
    creates: /home/{{ env_user }}/.ansible_freshclamInitialStartExecuted
  when: ansible_distribution in ["Archlinux"]

# - name: All services misc - Update clamav database (Ubuntu)
#  # ansible.builtin.shell: freshclam
#  ansible.builtin.shell: freshclam --daemon --user=clamav   # Fehlermeldung
#  args:
#    creates: /home/{{ env_user }}/.ansible_freshclamInitialStartExecuted
#  when: ansible_distribution in ["Ubuntu"]

- name: All services misc - Set flag file freshclamInitialStartExecuted (Ubuntu, Arch)
  ansible.builtin.shell:
    cmd: touch /home/{{ env_user }}/.ansible_freshclamInitialStartExecuted
  args:
    creates: /home/{{ env_user }}/.ansible_freshclamInitialStartExecuted
  when: ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All services misc - Start+enable clamav-daemon.service (Ubuntu, Arch)
  ansible.builtin.service:
    name: clamav-daemon.service
    state: started
    enabled: true
  when: ansible_distribution in ["Ubuntu", "Archlinux"]

- name: All services misc - Start+enable clamav-freshclam.service (Ubuntu, Arch)
  ansible.builtin.service:
    name: clamav-freshclam.service
    state: started
    enabled: true
  when: ansible_distribution in ["Ubuntu", "Archlinux"]


# -------------------------
# ### starship shell prompt
# -------------------------
# https://starship.rs/

- name: All services misc - starship shell prompt update - Create service unit file (Ubuntu, Arch)
  ansible.builtin.blockinfile:
    path: "/etc/systemd/system/starship_update.service"
    create: true
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - starship shell prompt update ###'
    block: |
      [Unit]
      Description=starship shell prompt update

      [Service]
      Type=oneshot
      #ExecStart=/usr/bin/curl -sS https://starship.rs/install.sh > starship_install.sh
      #ExecStart=/usr/bin/chmod 755 starship_install.sh && /usr/bin/bash starship_install.sh --yes && /usr/bin/rm starship_install.sh
      #
      ExecStart=/usr/bin/bash /usr/local/bin/starship_update.sh $HOME
    state: present
    group: root
    owner: root
    mode: '0644'
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

- name: All services misc - starship shell prompt update - Create timer unit file (Ubuntu, Arch)
  ansible.builtin.blockinfile:
    path: "/etc/systemd/system/starship_update.timer"
    create: true
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - starship shell prompt update ###'
    block: |
      [Unit]
      Description=starship shell prompt update

      [Timer]
      Unit=starship_update.service
      OnCalendar=Sat *-*-* 11:00:00
      AccuracySec=12h
      #RandomizedDelaySec=24h
      Persistent=true

      [Install]
      WantedBy=timers.target
    state: present
    group: root
    owner: root
    mode: '0644'
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

- name: All services misc - starship shell prompt update - start+enable timer (Ubuntu, Arch)
  ansible.builtin.systemd:
    name: starship_update.timer
    state: started
    enabled: true
    daemon_reload: true
  when: ansible_distribution in ["Ubuntu", "Archlinux"]


# ---------------
# ### zsh plugins
# ---------------
# zugehöriges, auszuführendes Script wird in 'config_all-services-misc.yml' in '/usr/local/bin' erstellt

- name: All services misc - zsh plugins update - Create service unit file (Ubuntu)
  ansible.builtin.blockinfile:
    path: "/etc/systemd/system/zshpluginsgit_update.service"
    create: true
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - zshpluginsgit_update ###'
    block: |
      [Unit]
      Description=zsh plugins git update

      [Service]
      Type=oneshot
      ExecStart=/usr/bin/bash /usr/local/bin/zshpluginsgit_update.sh
    state: present
    group: root
    owner: root
    mode: '0644'
  when:
    - ansible_distribution in ["Ubuntu"]

# monatlich (am 1. um 11:05 Uhr); alternativ: 'OnCalendar=monthly' (= monatlich am 01. umd 00:00 Uhr)
- name: All services misc - zsh plugins update - Create timer unit file (Ubuntu)
  ansible.builtin.blockinfile:
    path: "/etc/systemd/system/zshpluginsgit_update.timer"
    create: true
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - zshpluginsgit_update ###'
    block: |
      [Unit]
      Description=zsh plugins git update

      [Timer]
      Unit=zshpluginsgit_update.service
      OnCalendar=*-*-01 11:05:00
      AccuracySec=12h
      #RandomizedDelaySec=24h
      Persistent=true

      [Install]
      WantedBy=timers.target
    state: present
    group: root
    owner: root
    mode: '0644'
  when:
    - ansible_distribution in ["Ubuntu"]

- name: All services misc - zsh plugins update - start+enable timer (Ubuntu)
  ansible.builtin.systemd:
    name: zshpluginsgit_update.timer
    state: started
    enabled: true
    daemon_reload: true
  when:
    - ansible_distribution in ["Ubuntu"]


# ------------------
# ### cockpit.socket
# ------------------
# https://localhost:9090
- name: All services misc - zsh plugins update - start+enable timer (all)
  ansible.builtin.systemd:
    name: cockpit.socket
    state: started
    enabled: true
    daemon_reload: true
  # when:
  #  - ansible_distribution in ["Ubuntu"]


# ########
# ### user
# ########
# systemd user instance

# ----------------------------------------------------------------------------------------------------
# Anmekrung zu "systemctl --user status .." -  Abfrage
# das Verzeichnis "/etc/xdg/systemd/user" ist ein Link auf "../../systemd/user" (= "/etc/systemd/user")
# daher wird z.B. angezeigt:
# "Loaded: loaded (/etc/xdg/systemd/user/clamav_scanHome.timer; enabled; preset: enabled)"
# ----------------------------------------------------------------------------------------------------


# -------------
# ### Syncthing
# -------------
# https://docs.syncthing.net/users/autostart.html#linux

- name: All services misc - Syncthing - start+enable - env_user (Ubuntu, Arch)
  ansible.builtin.systemd:
    name: syncthing.service
    state: started
    enabled: true
    # daemon_reload: true
    scope: user
  become: true
  become_user: "{{ env_user }}"
  environment:
    XDG_RUNTIME_DIR: "{{ env_user_XDG_RUNTIME_DIR }}"


# ----------
# ### ClamAV
# ----------

# https://stackoverflow.com/questions/45776003/fixing-a-systemd-service-203-exec-failure-no-such-file-or-directory
- name: All services misc - ClamAV - Create service unit file - user - scanHome (Ubuntu, Arch)
  ansible.builtin.blockinfile:
    path: "/etc/systemd/user/clamav_scanHome.service"
    create: true
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - ClamAV scanHOME ###'
    block: |
      [Unit]
      Description=Scan home directory

      [Service]
      Type=oneshot
      #RemainAfterExit=yes
      #-> wenn status aktiv behält lässt sich der Service (auch manuell / nur in diesem Fall?) nicht erneut starten
      ExecStart=/bin/bash /usr/local/bin/scanHome.sh $HOME 2>/dev/null
      #User={{ env_user }}
    state: present
    group: root
    owner: root
    mode: '0644'
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

- name: All services misc - ClamAV - Create timer unit file - user - scanHome (Ubuntu, Arch)
  ansible.builtin.blockinfile:
    path: "/etc/systemd/user/clamav_scanHome.timer"
    create: true
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - ClamAV scanHOME ###'
    block: |
      [Unit]
      Description=Scan home directory

      [Timer]
      Unit=clamav_scanHome.service
      OnCalendar=Sat *-*-* 11:30:00
      AccuracySec=2h
      #RandomizedDelaySec=24h
      Persistent=true

      [Install]
      WantedBy=timers.target
    state: present
    group: root
    owner: root
    mode: '0644'
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

- name: All services misc - ClamAV - start+enable timer - env_user - scanHome (Ubuntu, Arch)
  ansible.builtin.systemd:
    name: clamav_scanHome.timer
    state: started
    enabled: true
    daemon_reload: true
    scope: user
  become: true
  become_user: "{{ env_user }}"
  environment:
    XDG_RUNTIME_DIR: "{{ env_user_XDG_RUNTIME_DIR }}"


# -------------
# ### ulauncher
# -------------
# https://ulauncher.io/
# https://github.com/Ulauncher/Ulauncher/

# install von ulauncher in bootstrap.sh im Anschluss an playbook verlagert, daher an dieser Stelle noch nicht vorhanden
#
# - name: All services misc - ulauncher - start+enable - env_user (Ubuntu, Arch)
#   ansible.builtin.systemd:
#     name: ulauncher.service
#     state: started
#     enabled: true
#     # daemon_reload: true
#     scope: user
#   become: true
#   become_user: "{{ env_user }}"
#   environment:
#     XDG_RUNTIME_DIR: "{{ env_user_XDG_RUNTIME_DIR }}"
