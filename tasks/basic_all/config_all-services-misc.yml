# ##########
# ### System
# ##########
# systemweit

# ------
# Cronie
# ------
# cron wird verwendet von ClamTK und timeshift

# https://wiki.archlinux.org/title/Cron
- name: Services - start+enable cronie (Arch)
  ansible.builtin.service:
    name: cronie.service
    state: started
    enabled: true
  when: ansible_distribution in ["Archlinux"]


# ------------
# # SSH / SSHD
# ------------

- name: Services - start ssh (Ubuntu)
  ansible.builtin.service:
    name: ssh
    state: started
  when: ansible_distribution in ["Ubuntu"]

- name: Services - enable ssh (Ubuntu)
  ansible.builtin.service:
    name: ssh
    enabled: true
  when: ansible_distribution in ["Ubuntu"]


- name: Services - start sshd (Archlinux)
  ansible.builtin.service:
    name: sshd
    state: started
  when: ansible_distribution in ["Archlinux"]

- name: Services - enable sshd (Archlinux)
  ansible.builtin.service:
    name: sshd
    enabled: true
  when: ansible_distribution in ["Archlinux"]


# --------
# # ClamAV
# --------

# ### Allgemein

# Arch-Wiki/ManjaroWiki: https://wiki.archlinux.org/title/ClamAV bzw. https://wiki.manjaro.org/index.php/ClamAV
# You will need to run freshclam before starting the service for the first time
# or you will run into trouble/errors which will prevent ClamAV from starting correctly.
#
# You may get a notification that clamd was not notified. This is normal because we haven't started the service yet.
#
- name: Update clamav database (Ubuntu, Arch)
  ansible.builtin.shell:
    cmd: freshclam && touch /home/{{ env_user }}/.freshclamInitialStartExecuted
  args:
    creates: /home/{{ env_user }}/.freshclamInitialStartExecuted
  when: ansible_distribution in ["Ubuntu", "Archlinux"]


- name: Services - Start+enable clamav-daemon.service (Ubuntu, Arch)
  ansible.builtin.service:
    name: clamav-daemon.service
    state: started
    enabled: true
  when: ansible_distribution in ["Ubuntu", "Archlinux"]

- name: Services - Start+enable clamav-freshclam.service (Ubuntu, Arch)
  ansible.builtin.service:
    name: clamav-freshclam.service
    state: started
    enabled: true
  when: ansible_distribution in ["Ubuntu", "Archlinux"]


# ########
# ### user
# ########
# systemd user instance

# -------------
# ### Syncthing
# -------------
# https://docs.syncthing.net/users/autostart.html#linux

- name: Services - Syncthing - start+enable - env_user (Ubuntu, Arch)
  ansible.builtin.systemd:
    name: syncthing.service
    state: started
    enabled: true
    # daemon_reload: true
    scope: user
  become: true
  become_user: "{{ env_user }}"
  environment:
    XDG_RUNTIME_DIR: "{{ env_user_XDG_RUNTIME_DIR }}"


# ----------
# ### ClamAV
# ----------

# https://stackoverflow.com/questions/45776003/fixing-a-systemd-service-203-exec-failure-no-such-file-or-directory
- name: Services - ClamAV - Create service unit file - user - scanHome (Ubuntu, Arch)
  ansible.builtin.blockinfile:
    path: "/etc/systemd/user/clamav_scanHome.service"
    create: true
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - ClamAV scanHOME ###'
    block: |
      [Unit]
      Description=Scan home directory

      [Service]
      Type=oneshot
      #RemainAfterExit=yes
      #-> wenn status aktiv behält lässt sich der Service (auch manuell / nur in diesem Fall?) nicht erneut starten
      ExecStart=/bin/bash /usr/local/bin/scanHome.sh $HOME 2>/dev/null
      #User={{ env_user }}
    state: present
    group: root
    owner: root
    mode: '777'
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

- name: Services - ClamAV - Create timer unit file - user - scanHome (Ubuntu, Arch)
  ansible.builtin.blockinfile:
    path: "/etc/systemd/user/clamav_scanHome.timer"
    create: true
    backup: true
    marker: '# ### {mark} ANSIBLE MANAGED BLOCK - ClamAV scanHOME ###'
    block: |
      [Unit]
      Description=Scan home directory

      [Timer]
      Unit=clamav_scanHome.service
      OnCalendar=Sat *-*-* 18:00:00
      AccuracySec=12h
      #RandomizedDelaySec=12h
      Persistent=true

      [Install]
      WantedBy=timers.target
    state: present
    group: root
    owner: root
    mode: '777'
  when:
    - ansible_distribution in ["Archlinux", "Ubuntu"]

- name: Services - ClamAV - start+enable timer - env_user - scanHome (Ubuntu, Arch)
  ansible.builtin.systemd:
    name: clamav_scanHome.timer
    state: started
    enabled: true
    daemon_reload: true
    scope: user
  become: true
  become_user: "{{ env_user }}"
  environment:
    XDG_RUNTIME_DIR: "{{ env_user_XDG_RUNTIME_DIR }}"
