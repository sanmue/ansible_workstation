# ----------------------------------------
# Install from locally downloades packages
# ----------------------------------------

# ### #####
# ### Pyenv
# ### #####
# - Arch: via paketmanager (...workstation-basic.yml)

# wenn timeout-problem: timeout erhöhen oder manueller download
# # -> manuell / install script: download via curl:
# curl -L --create-file-mode 0755 -o "/home/${userid}/Downloads/pyenv-installer.sh" "https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer"
# chmod +x "/home/${userid}/Downloads/pyenv-installer.sh" # --create-file-mode hat nicht funktioniert
- name: Local packages install - download installer-script for Pyenv (Debian)
  ansible.builtin.get_url:
    url: "https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer"
    dest: "/home/{{ env_user }}/Downloads/pyenv-installer.sh"
    timeout: 300
    force: false
    mode: "0755"
  when:
    - ansible_distribution == "Debian"

- name: Install basic packages - Get stat of .pyenv (all)
  ansible.builtin.stat:
    path: "/home/{{ env_user }}/.pyenv"
  register: pyenvfolder

- name: Install basic packages - Get stat of pyenv-installer skript (all)
  ansible.builtin.stat:
    path: "/home/{{ env_user }}/Downloads/pyenv-installer.sh"
  register: pyenvskript

- name: Install basic packages - Execute Installer-Skript for Pyenv (Debian)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.script:
    cmd: "/home/{{ env_user }}/Downloads/pyenv-installer.sh"
  args:
    creates: "/home/{{ env_user }}/.pyenv" # Run only if '.pyenv'-directory does NOT exist (from previous run)
  when:
    - ansible_distribution == "Debian"
    - pyenvskript.stat.exists == true

# #####################################
# ### Citrix Workspace App (ICA-Client)
# #####################################

# ### ---
# ### Info: siehe ggf. Fix für Gnome 44+
# ### ---

- name: Local packages install - install Certificates for Citrix Workspace App (ICA-Client) from Mozilla cert-folder + pem-convert (Debian)
  # requires installed Mozilla Firefox (was installed via a previous task)
  ansible.builtin.shell:
    # chdir: tasks/basic_all/
    # cmd: ./config_workstation-localPackageInstall-CitrixWorkspaceApp.sh
    cmd: chmod +x ./tasks/basic_all/config_workstation-localPackageInstall-CitrixWorkspaceApp.sh && ./tasks/basic_all/config_workstation-localPackageInstall-CitrixWorkspaceApp.sh
  when:
    - ansible_distribution == "Debian"

# ggf. TODO
- name: TODO - Download and install Citrix Workspace App + USB Support Package (Debian)
  ansible.builtin.debug:
    msg: "TODO: download from 'https://www.citrix.com/downloads/workspace-app/linux/'"
  when:
    - ansible_distribution == "Debian"

# ######################
# ### Visual Studio Code
# ######################
#
# installer deb-file: download siehe installer script

- name: Local packages install - get stat /usr/bin/code (all)
  ansible.builtin.stat:
    path: /usr/bin/code
  register: usrbincode

- name: Local packages install - get stat /tmp/code.deb (all)
  ansible.builtin.stat:
    # path: /tmp/code.deb
    path: "/home/{{ env_user }}/Downloads/code.deb"
  register: tmpcodedeb

# wenn timeout-problem: timeout erhöhen oder manueller download
# -> manuell / install script: download via curl:
# curl -L --create-file-mode 0755 -o "/home/${userid}/Downloads/code.deb" "https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"
- name: Local packages install - download Visual Studio Code deb-package (Debian)
  ansible.builtin.get_url:
    url: "https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"
    dest: "/home/{{ env_user }}/Downloads/code.deb"
    timeout: 300
    force: false
    mode: "0755"
  when:
    - ansible_distribution == "Debian"
    - (usrbincode.stat.exists == false) and (tmpcodedeb.stat.exists == false)

- name: Local packages install - install Visual Studio Code deb-package (Debian, apt)
  tags: workstation,ubuntu,apt
  ansible.builtin.apt:
    deb: "/home/{{ env_user }}/Downloads/code.deb"
    only_upgrade: true
  when:
    - ansible_pkg_mgr == "apt"
    - ansible_distribution == "Debian"
    - usrbincode.stat.exists == false

# #########
# ### Fonts
# #########
# * https://askubuntu.com/questions/1384501/installing-custom-fonts-on-ubuntu-server
# * https://wiki.archlinux.org/title/Fonts#Manual_installation
# * https://ostechnix.com/install-nerd-fonts-to-add-glyphs-in-your-code-on-linux/
# Meslo Nerd Font patched for Powerlevel10k:
# * https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#meslo-nerd-font-patched-for-powerlevel10k
# (Nerd Fonts:)
# * https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts
#
# * systemwide:    /usr/share/fonts/         # is under the purview of the package manager, and should not be modified manually
# *         or:    /usr/local/share/fonts/
# * user:          ~/.local/share/fonts/

- name: Local packages install - create local font directory - systemwide (all)
  ansible.builtin.file:
    path: /usr/local/share/fonts
    mode: "0755"
    state: directory

- name: Local packages install - Nerd Fonts - powerlevel10k - MesloLGS NF - systemwide (all)
  ansible.builtin.uri:
    url: "{{ item }}"
    method: GET
    follow_redirects: safe
    dest: /usr/local/share/fonts/
    mode: "0644"
  loop:
    - https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf
    - https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf
    - https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf
    - https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf

- name: Local packages install - Fonts - Build font information cache files for apps using fontconfig (all)
  ansible.builtin.shell: fc-cache -f

# #########################
# ### starship shell prompt
# #########################

# download via curl in bootstrap.sh verschoben
# - name: Local packages install - starship shell prompt (env_user) - download install-file (all)
#  become: true
#  become_user: "{{ env_user }}"
#  ansible.builtin.uri:
#    url: 'https://starship.rs/install.sh'
#    method: GET
#    dest: "/home/{{ env_user }}/starship_install.sh"
#    owner: "{{ env_user }}"
#    group: "{{ env_user }}"
#    mode: '0755'
#    creates: "/home/{{ env_user }}/starship_install.sh"
#  # register: result

- name: Local packages install - starship shell prompt (env_user) - check install status (all)
  ansible.builtin.stat:
    path: /usr/local/bin/starship
  register: starship

- name: Local packages install - create dir usr-local-bin if not exists  (all)
  ansible.builtin.file:
    path: /usr/local/bin
    state: directory
    mode: "0755"

- name: Local packages install - starship shell prompt (env_user) - execute install-file (all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: "/home/{{ env_user }}/starship_install.sh --yes"
  when:
    - starship.stat.exists == false

# config: in config_all-settingsmisc.yml; update: systemd timer
# https://starship.rs/

# ###############################
# ### zsh plugins - from git repo
# ###############################
# Anm.: bei Archlinux über paket, bei Manjaro schon von Werk aus vorhanden

- name: Local packages install - install zsh plugin - zsh-autosuggestions (Debian)
  ansible.builtin.git:
    repo: https://github.com/zsh-users/zsh-autosuggestions.git
    dest: /usr/share/zsh/plugins/zsh-autosuggestions
    clone: true
    update: true
  when: ansible_distribution in ["Debian"]

- name: Local packages install - install zsh plugin - zsh-syntax-highlighting (Debian)
  ansible.builtin.git:
    repo: https://github.com/zsh-users/zsh-syntax-highlighting.git
    dest: /usr/share/zsh/plugins/zsh-syntax-highlighting
    clone: true
    update: true
  when: ansible_distribution in ["Debian"]

- name: Local packages install - install zsh plugin - zsh-history-substring-search (Debian)
  ansible.builtin.git:
    repo: https://github.com/zsh-users/zsh-history-substring-search.git
    dest: /usr/share/zsh/plugins/zsh-history-substring-search
    clone: true
    update: true
  when: ansible_distribution in ["Debian"]
