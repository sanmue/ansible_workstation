
#######################################
### NOT depending on Desktop Environmet
#######################################

- name: Install basic packages for workstations (all)
  tags: basic, workstation, ubuntu, arch
  package:
    state: latest
    name:
      - ansible   # bereits installiert (bootstrap)
      - ansible-lint   # f체r z.B. ansible extension in VS Code
      - clamav
      - clamtk
      - curl
      - flatpak
      - gimp
      - gimp-help-en
      - grsync
      - git   # bereits installiert (bootstrap)
      - htop
#      - hyphen-de
      - keepassxc
      - kitty   # gpu beschleunigtes terminal
      - lsb-release
      - make
      - neofetch
      - rsync
      - shellcheck
#      - skanlite   # eher bei KDE
      - syncthing
#      - terminator   # Terminal emulator that supports tabs and grids
      - snapd
      - vim
      - vlc
      - unzip
      - wget


- name: install basic packages for snapper on btrfs filesystem (all)
  tags: basic, workstation, arch
  package:
    state: latest
    name:
      ### for btrfs filesystem:
      - snapper           # A tool for managing BTRFS and LVM snapshots. It can create, diff and restore snapshots and provides timelined auto-snapping.
      - snapper-gui       # GUI for snapper, a tool for Linux filesystem snapshot management
      # >>> You must create a default config with snapper cli named root first.
      # >>> Run 'snapper -c root create-config /' as root
  when: 
    - ansible_mounts[mount]  == "/"
    - ansible_mounts[fstype] == "btrfs"

- name: install additional packages for snapper on btrfs filesystem (Archlinux)
  tags: basic, workstation, arch
  package:
    state: latest
    name:
      ### additional packages for btrfs filesystem:
      - btrfs-assistant   # An application for managing BTRFS subvolumes and Snapper snapshots
      - snap-pac          # Pacman hooks that use snapper to create pre/post btrfs snapshots like openSUSE's YaST
      - snap-sync         # Use snapper snapshots to backup to external drive
  when: 
    - ansible_mounts[mount]  == "/"
    - ansible_mounts[fstype] == "btrfs"
    - ansible_distribution in ["Archlinux"]


- name: install basic packages (Archlinux)
  tags: basic, workstation, arch
  package:
    state: latest
    name:
      - base-devel   # insbes. wg. AUR Paketen
      - code   # The Open Source build of Visual Studio Code (vscode) editor
      - gnupg
      - gpgme
#      - ipset
      - openssh
      - pyenv
      - remmina
      - vim-ansible
  when: ansible_distribution in ["Archlinux"]


- name: install basic packages (Ubuntu)
  tags: basic, ubuntu, workstation
  package:
    state: latest
    name:
#      - snapd # bei Suse herausgenommen # bei Ubuntu schon vorhanden
#      - fwupd # firmware update daemon # bereits standardm. installiert
      - anki
      - gitk
      - gpg
      - openssh-client
      - powershell   # repo wurde hinzugef체gt
      - ssh
      - ufw
#     Pyenv
#     https://ostechnix.com/pyenv-python-version-management-made-easier/
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - llvm
      - libncurses5-dev
      - libncursesw5-dev
      - xz-utils
      - tk-dev
#     Miltimedia; entspechend libs sollten bereits installiert sein (wenn mei Installer ausgew채hlt wurde)
#      - ffmpeg
#      - x264
#      - x265
#      #- gstreamer - kram
#      - ...
# ---
#       - youtube-dl
  when: ansible_distribution == "Ubuntu"

- name: install basic packages - prereqesites for Pyenv (Ubuntu)
  tags: basic, ubuntu, workstation
  package:
    state: latest
    name:
#     Pyenv
#     https://ostechnix.com/pyenv-python-version-management-made-easier/
#     https://github.com/pyenv/pyenv-installer
#
#     manche Pakete sind schon installiert (s.o.)
      - make
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - wget
      - curl
      - llvm
      - libncurses5-dev
      - libncursesw5-dev
      - xz-utils
      - tk-dev
  when: ansible_distribution == "Ubuntu"

- name: install basic packages - Download Installer-Skript for Pyenv (Ubuntu)
  tags: basic, ubuntu, workstation
  ansible.builtin.get_url:
    url: https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer
    dest: /tmp/pyenv-installer.sh
    mode: u=rwx,g=rwx,o=rwx
  when: ansible_distribution == "Ubuntu"

- name: install basic packages - Execute Installer-Skript for Pyenv (Ubuntu)
  tags: basic, ubuntu, workstation
  ansible.builtin.script:
    cmd: /tmp/pyenv-installer.sh
  args:
    creates: /home/{{ env_user }}/.pyenv   # Run only if '.pyenv'-directory does not alrady exist (from previous run)
  become: true
  become_user: "{{ env_user }}"
  when: ansible_distribution == "Ubuntu"


- name: install basic packages (Ubuntu + x11 display server)
  tags: basic, ubuntu, workstation
  package:
    state: latest
    name:
      - xclip   # Voraussetzung f체r snap-package "espanso"
  when:
    - ansible_distribution == "Ubuntu"
    - env_displayserver == "x11"



#- name: install Vivaldi Browser (Ubuntu)
#  tags: workstation,ubuntu,suse
#  package:
#    state: latest
#    name:
#      - vivaldi-stable
##  when: ansible_os_family == "Suse" or
##        ansible_distribution in ["Ubuntu"]
#  when: ansible_distribution in ["Ubuntu"]

#- name: install Vivaldi Browser (Archlinux)
#  tags: workstation,arch
#  package:
#    state: latest
#    name:
#      - vivaldi
#      - vivaldi-ffmpeg-codecs
#  when:
#    - ansible_distribution in ["Archlinux"]
