# ###################################
# ### NOT Desktop Environmet specific
# ###################################

- name: Install basic packages for workstations (all)
  ansible.builtin.package:
    state: present
    name:
      - ansible   # bereits installiert (bootstrap)
      - ansible-lint   # für z.B. ansible extension in VS Code
      - bash
      - clamav
      - clamtk
      - curl
      - deja-dup   # A trivial-to-use personal backup tool to protect against accidental data loss
      - dmidecode
      - eslint   # An AST-based pattern checker for JavaScript (für VS Code / Code - OSS Extension)
      - evolution
      - evolution-bogofilter
      - evolution-ews   # MS Exchange integration through Exchange Web Services
      - evolution-spamassassin
      - libfaketime   # Report fake dates and times to programs without having to change the system-wide time.
      - flatpak
      - gimp
      - gimp-help-en
      - git   # bereits installiert (bootstrap)
      - grsync
      - hplip   # Drivers for HP DeskJet, OfficeJet, Photosmart, Business Inkjet and some LaserJet
      - htop
      - hunspell
      # - hyphen-de
      - inxi
      - kdeconnect
      - keepassxc
      - kitty   # gpu beschleunigtes terminal
      - libnotify   # Library for sending desktop notifications
      - lsb-release
      - make
      # - man-pages-de
      - neofetch
      - rsync   # bereits installiert (bootstrap)
      # - samba   # für VM: File sharing between host and Windows guest; https://wiki.manjaro.org/index.php/Virt-manager/en
      # - manjaro-settings-samba   # Adds an smb.conf file for Manjaro and enables samba
      - shellcheck
      # - skanlite   # bei KDE Plasma Desktop
      - steam
      - syncthing
      # - terminator   # Terminal emulator that supports tabs and grids
      - vim   # bereits installiert (bootstrap)
      - vlc
      - unzip
      - wget
      - xdg-utils
      # ---------
      # firmware:
      - b43-fwcutter
      - fwupd
      - linux-firmware


- name: Check if btrfs filesystem + register result in variable (all)
  ansible.builtin.command: mount | grep "^/dev" | grep "on / " | grep "btrfs"
  register: rootFsIsBtrfs
  ignore_errors: true

- name: Install basic packages for snapper on btrfs filesystem (all)
  ansible.builtin.package:
    state: present
    name:
      # ### for btrfs filesystem:
      - snapper      # A tool for managing BTRFS and LVM snapshots. It can create, diff and restore snapshots and provides timelined auto-snapping.
      - grub-btrfs   # Include btrfs snapshots in GRUB boot options
      # >>> You must create a default config with snapper cli named root first.
      # >>> Run 'snapper -c root create-config /' as root
  # with_items: ansible_mounts
  when:
    # - item.mount  == '/'
    # - item.fstype == 'btrfs'
    - rootFsIsBtrfs != ''

- name: Install basic packages for snapper on btrfs filesystem (Archlinux/Manjaro)
  ansible.builtin.package:
    state: present
    name:
      - snapper-gui       # GUI for snapper, a tool for Linux filesystem snapshot management
  when:
    - rootFsIsBtrfs != ''
    - env_lsb_id == "ManjaroLinux"

- name: Check if default snapper config 'root' for '/' already exists (all)
  ansible.builtin.command: snapper list-configs | grep root
  register: snapperDefaultConfigExists
  ignore_errors: true

- name: Create a default config for '/' with snapper cli named 'root' (all)
  ansible.builtin.shell: snapper -c root create-config / && touch /home/{{ env_user }}/.snapperDefaultRootConfigCreated
  # with_items: ansible_mounts
  args:
    creates: /home/{{ env_user }}/.snapperDefaultRootConfigCreated
  when:
    # - item.mount  == '/'
    # - item.fstype == 'btrfs'
    - rootFsIsBtrfs != ''
    # - snapperDefaultConfigExists == ''
    # - snapperDefaultConfigExists is not defined or snapperDefaultConfigExists == ''

- name: Install additional packages for snapper on btrfs filesystem (Archlinux)
  ansible.builtin.package:
    state: present
    name:
      # ### additional packages for btrfs filesystem:
      - snap-pac          # Pacman hooks that use snapper to create pre/post btrfs snapshots like openSUSE's YaST
      - snap-sync         # Use snapper snapshots to backup to external drive
  # with_items: ansible_mounts
  when:
    # - item.mount  == '/'
    # - item.fstype == 'btrfs'
    - rootFsIsBtrfs != ''
    - ansible_distribution in ["Archlinux"]

- name: Install additional packages for snapper on btrfs filesystem (Archlinux/Manjaro)
  ansible.builtin.package:
    name:
      - btrfs-assistant   # An application for managing BTRFS subvolumes and Snapper snapshots
      - timeshift-autosnap-manjaro
    state: present
  when:
    - rootFsIsBtrfs != ''
    - ansible_distribution in ["Archlinux"]
    - env_lsb_id == "ManjaroLinux"

#  verlagert an Schluss bootstrap.sh, da wg. Auswahlmöglichkeit ähnliches Paket nicht installiert wird
# - name: Install additional packages for snapper on btrfs filesystem (Archlinux, NOT Manjaro)
#   community.general.pacman:
#     name:
#       - btrfs-assistant   # An application for managing BTRFS subvolumes and Snapper snapshots
#     state: present
#     executable: yay
#     # extra_args: --aur
#   when:
#     - rootFsIsBtrfs != ''
#     - ansible_distribution in ["Archlinux"]
#     - env_lsb_id != "ManjaroLinux"

- name: Install additional packages for snapper on btrfs filesystem via pamac from AUR (Archlinux, NOT Manjaro)
  ansible.builtin.shell: pamac build --no-confirm btrfs-assistant
  args:
    creates: "/home/{{ env_user }}/.ansible_pamacArchBasicPackages"
  when:
    - ansible_distribution in ["Archlinux"]
    - env_lsb_id != "ManjaroLinux"


- name: Install basic packages (Archlinux)
  ansible.builtin.package:
    state: present
    name:
      - archlinux-keyring
      - awesome-terminal-fonts
      - base-devel   # insbes. wg. AUR Paketen   # bereits installiert (bootstrap)
      - chromium
      - cronie   # für clamtk + timeshift # Daemon that runs specified programs at scheduled times and related tools
      - code   # The Open Source build of Visual Studio Code (vscode) editor
      - discord
      # - evolution-on   # Tray plugin for the Evolution email client
      # - exfat-utils   # exfat-utils and exfatprogs are in conflict
      - firefox
      - firefox-i18n-en-us
      # - flameshot   # -> ksnip
      # - firewalld   # bereits installiert (bootstrap)
      - foliate
      - gnupg
      - gpgme
      - hunspell-de
      - hunspell-en_us
      # - ipset
      - ksnip
      - libreoffice-still
      # - libreoffice-still-de
      - libreoffice-still-en-gb
      - lshw
      - malcontent   # Parental control support for applications
      - nextcloud-client
      - openssh   # bereits installiert (bootstrap)
      - powerline   # Statusline plugin for vim, an provides statuslines udn prompts for several other applications
                    # including zsh, bash, tmux, IPython, Awesome, i3 and qtile
      - powerline-fonts   # patched fonts for powerline
      - powerline-vim   # vim plugin for powerline
      - psutils   # A set of postscript utilities
      - python-psutil
      - pyenv
      - remmina
      # - snapd   # bei Manjaro in repo drin, bei Arch (EndeavourOS) nicht
      - signal-desktop
      - steam-native-runtime   # Native replacement for the Steam runtime using system libraries (installiert benötigte 32bit libs)
      - torbrowser-launcher
      - ttf-dejavu
      - ttf-font-awesome
      - vim-ansible
      # - zsh
      # - zsh-doc
      # - zsh-autosuggestions       # besser: install from git 
      # - zsh-completions           # besser: install from git 
      # - zsh-syntax-highlighting   # besser: install from git 
      # - zsh-theme-powerlevel10k   # besser: install from git # There is also zsh-theme-powerlevel10k community package. 
                                    # Historically, it has been breaking often and for extended periods of time. Do not use it.
      # - zshdb   # A debugger for zsh scripts
      # ---------
      # firmware:
      # - alsa-firmware   # unresolvable package conflicts detected
      - sof-firmware
  when: ansible_distribution in ["Archlinux"]

- name: Install basic packages (Archlinux/Manjaro)
  ansible.builtin.package:
    name:
      - brave-browser
      - linux-steam-integration
      - manjaro-keyring
      - snapd
      - timeshift
      - ttf-meslo-nerd-font-powerlevel10k
      # -----------------------------------
      # flatpak- und snap-plugin für pamac:
      - libpamac-flatpak-plugin
      - pamac-snap-plugin
    state: present
  when:
    - ansible_distribution in ["Archlinux"]
    - env_lsb_id == "ManjaroLinux"

# Inst für Archlinux, EndeavourOS: packages_workstation-localPackageInstall.yml
# da aufgrund mehrerer Treffer mit yay Inst so nicht funktioniert
# - name: Install basic packages (Archlinux, NOT Manjaro)
#  community.general.pacman:
#    name:
#    - brave
#    - btrfs-assistant
#    - linux-steam-integration
#    - snapd
#    # # - timeshift
#    # # - timeshift-systemd-timer
#    # # - timeshift-autosnap
#    # # - timeshift-autoupgrade
#    state: present
#    executable: yay
#    extra_args: --noconfirm -S
#  when:
#  - ansible_distribution in ["Archlinux"]
#  - env_lsb_id != "ManjaroLinux"

- name: Install basic packages via pamac from AUR (brave-bin) (Archlinux, NOT Manjaro)
  # ansible.builtin.shell: "pamac build --no-confirm brave-bin linux-steam-integration snapd && touch /home/{{ env_user }}/.ansible_pamacArchBasicPackages"
  # müssen im Folgenden einzeln aufgeführt werden, da sonst Fehler-Rückmeldung
  # alternativ evtl. testen: über shell-skript
  ansible.builtin.shell: "pamac build --no-confirm brave-bin"
  args:
    creates: "/home/{{ env_user }}/.ansible_pamacArchBasicPackages"
  when:
    - ansible_distribution in ["Archlinux"]
    - env_lsb_id != "ManjaroLinux"

- name: Install basic packages via pamac from AUR (linux-steam-integration) (Archlinux, NOT Manjaro)
  ansible.builtin.shell: "pamac build --no-confirm linux-steam-integration"
  args:
    creates: "/home/{{ env_user }}/.ansible_pamacArchBasicPackages"
  when:
    - ansible_distribution in ["Archlinux"]
    - env_lsb_id != "ManjaroLinux"

- name: Install basic packages via pamac from AUR (ttf-meslo-nerd-font-powerlevel10k) (Archlinux, NOT Manjaro)
  ansible.builtin.shell: "pamac build --no-confirm ttf-meslo-nerd-font-powerlevel10k"
  args:
    creates: "/home/{{ env_user }}/.ansible_pamacArchBasicPackages"
  when:
    - ansible_distribution in ["Archlinux"]
    - env_lsb_id != "ManjaroLinux"

- name: Install basic packages via pamac from AUR - create flag file (Archlinux, NOT Manjaro)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.ansible_pamacArchBasicPackages"
    state: touch
    mode: u=rw,g=r,o=r
    modification_time: preserve
    access_time: preserve
  when:
    - ansible_distribution in ["Archlinux"]
    - env_lsb_id != "ManjaroLinux"

# ---
# snapd:
# da im bootstrap.sh bereits mit yay pamac-all snapd installiert wird, hier nicht mehr notwendig
# ---
# Anmerkung: alterntiver install via git clone + makepkg (weiter unten) funktioniert ohne Unterbrechtung (Abrfrage sudo pw)
# ---
# - name: Install basic packages via pamac from AUR (snapd) (Archlinux, NOT Manjaro)
#  ansible.builtin.shell: "pamac build --no-confirm snapd"
#  # become: true
#  # become_user: "{{ env_user }}"   # Ablauf wird unterbroche und nach Berechtigung (root) gefragt; hat jeoch so funktioniert
#  args:
#    creates: "/home/{{ env_user }}/.ansible_pamacArchBasicPackagesSnapd"
#  when:
#    - ansible_distribution in ["Archlinux"]
#    - env_lsb_id != "ManjaroLinux"

# - name: Install basic packages via pamac from AUR (snapd) - create flag file (Archlinux, NOT Manjaro)
#  ansible.builtin.file:
#    path: "/home/{{ env_user }}/.ansible_pamacArchBasicPackagesSnapd"
#    state: touch
#    mode: u=rw,g=r,o=r
#    modification_time: preserve
#    access_time: preserve
#  when:
#    - ansible_distribution in ["Archlinux"]
#    - env_lsb_id != "ManjaroLinux"

# # snapd: alternativer Install 'manuell' über gitclone + makepkg:
# - name: Install basic packages from AUR (snapd) - git clone (Archlinux, NOT Manjaro)
#  become: true
#  become_user: "{{ env_user }}"   # damit Rechte stimmen für nächsten Schritt: makepkg
#  ansible.builtin.git:
#    repo: https://aur.archlinux.org/snapd.git
#    dest: /tmp/snapd
#  when:
#    - ansible_distribution in ["Archlinux"]
#    - env_lsb_id != "ManjaroLinux"
#
#- name: Install basic packages from AUR (snapd) - makepgk (Archlinux, NOT Manjaro)
#  become: true
#  become_user: "{{ env_user }}"   # makepkg darf nicht als root ausgeführt werden
#  ansible.builtin.shell: makepkg -si --needed --noconfirm
#  args:
#    chdir: /tmp/snapd
#  when:
#    - ansible_distribution in ["Archlinux"]
#    - env_lsb_id != "ManjaroLinux"

- name: Install basic packages - starship shell prompt (Archlinux, NOT Manjaro)
  ansible.builtin.shell: curl -sS https://starship.rs/install.sh
  when:
    - ansible_distribution in ["Archlinux"]
    - env_lsb_id != "ManjaroLinux"
# config: in config_all-settingsmisc.yml; update: systemd timer
# https://starship.rs/

- name: Install basic packages (Ubuntu)
  ansible.builtin.package:
    state: present
    name:
      - anki
      - clamav-daemon
      - evolution-plugin-pstimport
      - evolution-plugins
      - exfat-fuse#
      # - firefox # -> in Standard-Inst bereits vorhanden (ab 22.04: als snap package)
      # - firefox-locale-de
      # - firefox-locale-en
      - gitk
      - gpg
      - gufw   # gui for ufw
      - hunspell-de-de
      - hunspell-en-us
      - libidn11-dev   # benötigt für Citrix Workspace app (ica client)
      # - luckybackup
      - openssh-client
      - powershell   # repo wurde hinzugefügt
      - python3-psutil
      # - searchmonkey
      - ssh   # bereits installiert (bootstrap)
      - timeshift
      - ufw   # bereits installiert (bootstrap)
      # Multimedia; entspechend libs sollten bereits installiert sein (wenn mei Installer ausgewählt wurde)
      # - ffmpeg
      # - x264
      # - x265
      # #- gstreamer - kram
      # - ...
      # - youtube-dl
  when: ansible_distribution == "Ubuntu"


# - name: Install packages for workstations - Firefox from MozillaTeam ppa (Ubuntu >=22 + Gnome)
#  ansible.builtin.apt:
#    state: present
#    name:
# #      - firefox              # ab Ubuntu 22.04: Standard als snap package installiert (Probleme: z.B. Keepassxc Erweiterung)
# #      - firefox-dev
#      - firefox               # wenn alles korrekt vorher konfiguriert wurde, wird Firefox aus mozillateam ppa als deb-package installiert
# #      - firefox-locale-de
#      - firefox-locale-en
# #      - firefox-esr
# #      - firefox-esr-locale-en      
#    default_release: 'o=LP-PPA-mozillateam'   # damit aus ppa installiert wird, und nicht wieder von ubuntu als snap
#    update_cache: yes
#  when:
#    - ansible_distribution == "Ubuntu"
#    - ansible_distribution_major_version|int >= 22
#    - env_desktop == "ubuntu:gnome"

# ## Visual Studio Code - Install
# ## - moved to ...-manualInstall.yml


- name: Install basic packages - prereqesites for Pyenv (Ubuntu)
  ansible.builtin.package:
    state: present
    name:
     # Pyenv
     # https://ostechnix.com/pyenv-python-version-management-made-easier/
     # https://github.com/pyenv/pyenv-installer
     # manche Pakete sind schon installiert (s.o.):
      - make
      - build-essential
      - libssl-dev
      - zlib1g-dev
      - libbz2-dev
      - libreadline-dev
      - libsqlite3-dev
      - wget
      - curl
      - llvm
      - libncurses5-dev
      - libncursesw5-dev
      - xz-utils
      - tk-dev
  when: ansible_distribution == "Ubuntu"

- name: Install basic packages - Download Installer-Skript for Pyenv (Ubuntu)
  ansible.builtin.get_url:
    url: https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer
    dest: /tmp/pyenv-installer.sh
    mode: u=rwx,g=rwx,o=rwx
  when: ansible_distribution == "Ubuntu"

- name: Install basic packages - Execute Installer-Skript for Pyenv (Ubuntu)
  ansible.builtin.script:
    cmd: /tmp/pyenv-installer.sh
  args:
    creates: /home/{{ env_user }}/.pyenv   # Run only if '.pyenv'-directory does not alrady exist (from previous run)
  become: true
  become_user: "{{ env_user }}"
  when: ansible_distribution == "Ubuntu"


- name: Install basic packages (all + x11 display server)
  ansible.builtin.package:
    state: present
    name:
      - xclip   # Command line interface to the X11 clipboard   # Voraussetzung für snap-package "espanso"
  when:
    - ansible_distribution in ["Ubuntu", "Archlinux"]
    - env_displayserver == "x11"


# - name: install Vivaldi Browser (Ubuntu)
#  ansible.builtin.package:
#    state: present
#    name:
#      - vivaldi-stable
# #  when: ansible_os_family == "Suse" or
# #        ansible_distribution in ["Ubuntu"]
#  when: ansible_distribution in ["Ubuntu"]

# - name: Install Vivaldi Browser (Archlinux)
#  ansible.builtin.package:
#    state: present
#    name:
#      - vivaldi
#      - vivaldi-ffmpeg-codecs
#  when:
#    - ansible_distribution in ["Archlinux"]
