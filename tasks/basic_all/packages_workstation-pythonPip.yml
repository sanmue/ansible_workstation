# ######################
# ### Python pip install
# ######################
# python3-pip, python3-psutil, (python3-pyinotify), ...: Installiert in packages_workstation-basic.yml

# - pyenv:
#   - https://technicalnavigator.in/how-to-fix-error-externally-managed-environment-in-python-kali-linux/
#
# - allgemein:
# - https://pythonspeed.com/articles/externally-managed-environment-pep-668/
# - https://stackoverflow.com/questions/75616371/sudo-pip-install-cryptography-error-externally-managed-environment
# - https://itsfoss.com/externally-managed-environment/#option-2-use-python-virtual-environment
# - https://stackoverflow.com/questions/75608323/how-do-i-solve-error-externally-managed-environment-everytime-i-use-pip3
# - https://stackoverflow.com/questions/75602063/pip-install-r-requirements-txt-is-failing-this-environment-is-externally-manag/75696359#75696359
# - https://peps.python.org/pep-0668/#mark-the-installation-as-externally-managed
#
# pipx: jupyter
# - # jupyter: https://samedwardes.com/blog/2022-10-23-best-jupyter-lab-install/

- name: Python - pip - Info zu möglicher Fehlermeldung (env_user, all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.debug:
    msg: "Wenn es im Folgeschritt zu Fehlermelung kommt: source .zshrc/.bashrc oder Terminal neu starten und nochmal Playbook starten."

- name: Python - pip - upgrade pip (env_user, all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: pip install --upgrade pip
  args:
    creates: "/home/{{ env_user }}/.ansible_PythonPip"

- name: Python - pipx - install apps - with dependencies (all)
  become: true
  become_user: "{{ env_user }}"
  community.general.pipx:
    state: present
    name: "{{ item }}"
    install_deps: true
  loop:
    # - cst-lsp # -> pip # Zed editor Extension 'zed-python-refactoring'
    # - ansible # https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html # zurück umgestellt auf inst via paketmanager
    - faker # Ulauncher Extension Requirement faker
    - jedi-language-server # autocompletion for python (Anmerkung: 'jedi' installed via pip)
    - jupyter # Jupyter metapackage: notebook jupyterlab ipython ipykernel jupyter-console nbconvert ipywidgets
    - Pint # Ulauncher Extension Requirement Calculate Anything
    # - python-lsp-server[all] # -> pip # Zed editor Extension 'Python LSP' # Zed editor Extension 'zed-python-refactoring')
    # - virtualenv # A tool for creating isolated virtual python environments. # wird schon als dep von virtuelenv-pyenv installiert
    #   -> sonst: (symlink missing or pointing to unexpected location)
    - virtualenv-pyenv # A virtualenv Python discovery plugin for pyenv–installed interpreters # installiert 'virtualenv' als dependency
    - wrapt_timeout_decorator # Ulauncher Extension Requirement Bluetooth

- name: Python - pipx - install apps - without dependencies (all)
  become: true
  become_user: "{{ env_user }}"
  community.general.pipx:
    state: present
    name: "{{ item }}"
    install_deps: false
  loop:
    - deepl # Ulauncher Extension Requirement DeepL Translator # einzige dependency 'normalizer' wird (auch) bei 'jupyter'  (s.o.) installiert;
    # (symlink missing or pointing to unexpected location) daher bei 'jupyter' bei Ausführung pipx list

# https://pipx.pypa.io/stable/installation/#on-linux
- name: Python - pipx - config - ensurepath (all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell:
    cmd: pipx ensurepath

- name: Python - pip - shell install libs - setuptools (all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell:
    cmd: pip install --user setuptools
  args:
    creates: "/home/{{ env_user }}/.ansible_PythonPip"

# Voraussetzung für 'ansible.builtin.pip' Modul: pip, virtualenv, setuptools or packaging
- name: Python - pip - install libs via ansible builtin pip - pyhton_pip_requirements.txt (all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.pip:
    requirements: "{{ playbook_dir }}/files/python_pip_requirements.txt"
    extra_args: --user
    virtualenv_command: "pyenv virtualenv"
    virtualenv: "{{ lookup('ansible.builtin.env', 'PYENV_ROOT') }}/versions/{{ ansible_python_version }}"

# - name: Python - pip - install libs via builtin shell pyhton_pip_requirements.txt (all)
#   become: true
#   become_user: "{{ env_user }}"
#   ansible.builtin.shell:
#     cmd: "pip install --user -r {{ playbook_dir }}/files/python_pip_requirements.txt"
#   args:
#     creates: "/home/{{ env_user }}/.ansible_PythonPip"

# WORKAROUND: pipx reinstall_all
# installs über pip, die schon als deps bei pipx installiert wurden -> pipx list: (symlink missing or pointing to unexpected location)
# TODO: pipx + pip deps checken
- name: Python - pipx - WORKAROUND reinstall_all (all)
  become: true
  become_user: "{{ env_user }}"
  community.general.pipx:
    state: reinstall_all

- name: Python - pip - set flag file for pip installs (env_user, all)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.ansible_PythonPip"
    state: touch
    modification_time: preserve
    mode: u=rw,g=r,o=r
