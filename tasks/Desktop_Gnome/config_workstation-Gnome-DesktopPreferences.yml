# ####################
# ## GDM configuration
# ####################

- name: Gnome Desktop - Preferences - Config-workstation-Gnome-DesktopPrefs - GDM config (all, Gnome, X11)
  become: true
  become_user: root
  ansible.builtin.lineinfile:
    path: "/etc/gdm/custom.conf"
    insertafter: "#WaylandEnable=false"
    line: "WaylandEnable=false"
    backup: true
  when:
    - env_desktop == "gnome"
    - env_displayserver == "x11"

# ##########################
# ## Create Desktop Launcher
# ##########################

# ### Syncthing
# ### ---------
- name: Gnome Desktop - Preferences - Copy desktop launcher file for 'Syncthing start' to local user-folder (Arch + Gnome)
  ansible.builtin.copy:
    src: "files/gnome/Gnome_DesktopLauncher_User_syncthing-start.desktop"
    dest: "/home/{{ env_user }}/.local/share/applications/syncthing-start.desktop"
    remote_src: true
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw,g=r,o=r # mode: '0644'
  when:
    - env_desktop == "gnome"
    - ansible_distribution == "Archlinux"

# ### Changed to: Autostart Syncthing via systemd service 'syncthing'
#     - https://docs.syncthing.net/users/autostart.html#linux
# - name: Gnome Desktop - Preferences - Copy desktop launcher file for 'Syncthing WebGUI' to local user-folder (Arch + Gnome)
#  ansible.builtin.copy:
#    src: "files/gnome/Gnome_DesktopLauncher_User_syncthing-WebGUI.desktop"
#    dest: "/home/{{ env_user }}/.local/share/applications/syncthing-WebGUI.desktop"
#    remote_src: true
#    owner: "{{ env_user }}"
#    group: "{{ env_user }}"
#    mode: u=rw,g=r,o=r   # mode: '0644'
#  when:
#    - env_desktop == "gnome"
#    - ansible_distribution == "Archlinux"

# #######################################
# ### Gnome Autostart Apps - Current User
#
# config for all Users see:
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/desktop_migration_and_administration_guide/user-sessions#autostart-applications
# #######################################

# ### Autostart-Verzeichnis erstellen (aktueller User):
# ### -------------------------------------------------
- name: Gnome Desktop - Preferences - Create autostart directory for current user if it does not exist (all, Gnome)
  ansible.builtin.file:
    path: /home/{{ env_user }}/.config/autostart
    state: directory
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rwx # mode: '0700'
  when:
    - env_desktop in ["gnome"]

# ### Autostart-Programme:
# ### --------------------
- name: Gnome Desktop - Preferences - Copy autostart file for 'Nextcloud Client' (flatpak) to local user-folder (Debian + Gnome)
  ansible.builtin.copy:
    src: "files/gnome/Gnome_AutostartApp_User_NextcloudClient_flatpak.desktop"
    dest: "/home/{{ env_user }}/.config/autostart/NextcloudClient.desktop"
    remote_src: true
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw,g=rw,o=r # mode: '0664'
  when:
    - env_desktop == "gnome"
    - ansible_distribution == "Debian"

- name: Gnome Desktop - Preferences - Copy autostart file for 'Nextcloud Client' to local user-folder (Arch + Gnome)
  ansible.builtin.copy:
    src: "files/gnome/Gnome_AutostartApp_User_NextcloudClient.desktop"
    dest: "/home/{{ env_user }}/.config/autostart/NextcloudClient.desktop"
    remote_src: true
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw,g=rw,o=r # mode: '0664'
  when:
    - env_desktop == "gnome"
    - ansible_distribution == "Archlinux"

- name: Gnome Desktop - Preferences - Copy autostart file for 'Syncthing Start' to local user-folder (Arch + Gnome)
  ansible.builtin.copy:
    src: "files/gnome/Gnome_DesktopLauncher_User_syncthing-start.desktop"
    dest: "/home/{{ env_user }}/.config/autostart/syncthing-start.desktop"
    remote_src: true
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw,g=rw,o=r # mode: '0664'
  when:
    - env_desktop == "gnome"
    - ansible_distribution == "Archlinux"

# #################
# ### favorite apps
# #################

- name: Gnome Desktop - Preferences - Adding favorite apps to dock (Gnome, all)
  # gedit ('org.gnome.gedit.desktop') replaced with Gnome TextEditor
  # nicht installierte Apps werden einfach nicht angezeigt (nach Install schon), d.h. dass hier drin ist kein Problem
  ansible.builtin.shell: gsettings set org.gnome.shell favorite-apps "['com.belmoussaoui.Authenticator.desktop', 'org.keepassxc.KeePassXC.desktop', 'firefox.desktop', 'firefox-esr.desktop', 'org.mozilla.firefox.desktop', 'org.gnome.Epiphany.desktop', 'chromium.desktop', 'org.chromium.Chromium.desktop', 'com.microsoft.Edge.desktop', 'brave-browser.desktop', 'com.brave.Browser.desktop', 'one.ablaze.floorp.desktop', 'org.gnome.Evolution.desktop', 'com.gexperts.Tilix.desktop', 'nemo.desktop', 'org.gnome.TextEditor.desktop', 'net.cozic.joplin_desktop.desktop', 'com.vscodium.codium.desktop', 'code_code.desktop', 'code-oss.desktop', 'code.desktop', 'com.visualstudio.code.desktop', 'dev.zed.Zed.desktop', 'pycharm.desktop', 'anki.desktop', 'net.ankiweb.Anki.desktop', 'de.willuhn.Jameica.desktop', 'rhythmbox.desktop', 'org.gnome.Rhythmbox3.desktop', 'de.haeckerfelix.Shortwave.desktop', 'org.signal.Signal.desktop', 'signal-desktop.desktop', 'org.ferdium.Ferdium.desktop', 'org.remmina.Remmina.desktop', 'virt-manager.desktop']"
  when:
    - env_desktop in ["gnome"]

# ######################
# ### desktop-background
# ######################

- name: Gnome Desktop - Preferences - Create a directory for desktop-wallpaper in local user-folder (Gnome)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.local/share/backgrounds"
    state: directory
    mode: "0777"
  when:
    - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Copy desktop-wallpaper file to local user-folder (Gnome)
  # become: true
  # become_user: "{{ env_user }}"
  ansible.builtin.copy:
    src: "files/gnome/background/brad-huchteman-stone-mountain.jpg"
    dest: "/home/{{ env_user }}/.local/share/backgrounds/brad-huchteman-stone-mountain.jpg"
    remote_src: true
    owner: "{{ env_user }}"
    group: "{{ env_user }}"
    mode: u=rw,g=rw,o=rw
  when:
    - env_desktop in ["gnome"]

# - name: Set desktop - background (Gnome)
#  community.general.dconf:
#    key: "/org/gnome/desktop/background/picture-uri"
#    value: '"file:///home/{{ env_user }}/.local/share/backgrounds/brad-huchteman-stone-mountain.jpg"'
#    state: present   # standard-wert
#  when:
#    - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop - background (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/background/picture-uri '"file:///home/sandro/.local/share/backgrounds/brad-huchteman-stone-mountain.jpg"'
  when:
    - env_desktop in ["gnome"]

# - name: Set desktop - dark background (Gnome)
#  community.general.dconf:
#    key: "/org/gnome/desktop/background/picture-uri-dark"
#    value: '"file:///home/{{ env_user }}/.local/share/backgrounds/brad-huchteman-stone-mountain.jpg"'
#    state: present   # standard-wert
#  when:
#    - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop - dark background (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/background/picture-uri-dark '"file:///home/{{ env_user }}/.local/share/backgrounds/brad-huchteman-stone-mountain.jpg"'
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set desktop-wallpaper picture-options (Gnome)
#  community.general.dconf:
#    key: "/org/gnome/desktop/background/picture-options"
#    value: "'zoom'"
#    state: present   # standard-wert
#  when:
#    - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop-wallpaper picture-options (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/background/picture-options "'zoom'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set show-desktop-icons (Gnome)
#  community.general.dconf:
#    key: "/org/gnome/desktop/background/show-desktop-icons"
#    value: "false"
#  when:
#    - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set show-desktop-icons (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/background/show-desktop-icons "false"
  when:
    - env_desktop in ["gnome"]

# ### weitere desktop settings
# ### ------------------------
# - name: Set desktop interface - clock-format (Gnome)
#  community.general.dconf:
#    key: "/org/gnome/desktop/interface/clock-format"
#    value: "'24h'"
#    state: present
#  when:
#    # - ansible_os_family == "Suse"
#    # - env_desktop == "gnome"
#    - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop interface - clock-format (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/interface/clock-format "'24h'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set desktop interface - clock-show-date (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/desktop/interface/clock-show-date"
#     value: "true"
#     state: present
#   when:
#     # - ansible_os_family == "Suse"
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop interface - clock-show-date (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/interface/clock-show-date "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set desktop interface - clock-show-weekday (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/desktop/interface/clock-show-weekday"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop interface - clock-show-weekday (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/interface/clock-show-weekday "true"
  when:
    - env_desktop in ["gnome"]

# ### Appearance
# - name: Gnome Desktop - Preferences - Set desktop interface - color-sheme - dark (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/desktop/interface/color-scheme"
#     value: "'prefer-dark'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop interface - color-sheme - dark (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/interface/color-scheme "'prefer-dark'"
  when:
    - env_desktop in ["gnome"]

# ### gtk-theme ###
# all

# - name: Gnome Desktop - Preferences - create a directory for gtk-theme files in userdir (all + Gnome)
#  ansible.builtin.file:
#    path: "/home/{{ env_user }}/.themes"
#    state: directory
# #    mode: '0755'
#  when:
#    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - copy gtk-theme MateriaBreath-dark to userdir (all + Gnome)
#  unarchive:
#    src: "files/gnome/themes/MateriaBreath.zip"
#    dest: "/home/{{ env_user }}/.themes/"
#    creates: "/home/{{ env_user }}/.themes/MateriaBreath-dark" # creates unterstützt keine tilde
#    remote_src: yes
#    keep_newer: yes
# #    owner: sandro
# #    group: sandro # Debian
# #    mode: u=rwx,g=rwx,o=rwx
#  when:
#    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - copy gtk-theme Ultimate-Dark-(Flat)-Green to userdir (all + Gnome)
#  unarchive:
#    src: "files/gnome/themes/Ultimate-Dark-(Flat)-Green.zip"
#    dest: "/home/{{ env_user }}/.themes/"
#    creates: /home/"{{ env_user }}"/.themes/Ultimate-Dark-(Flat)-Green # creates unterstützt keine tilde
#    remote_src: yes
#    keep_newer: yes
# #    owner: sandro
# #    group: sandro # debian
# #    mode: u=rwx,g=rwx,o=rwx
#  when:
#    - env_desktop in ["gnome"]

# #- name: Gnome Desktop - Preferences - Set desktop interface - gtk-theme MateriaBreath-dark (all + Gnome)
# # bei theme "MateriaBreath-dark" sind die Optionskästchenen + Häkchen nicht zu sehen
# - name: Set desktop interface - gtk-theme (Gnome, Debian)
#   community.general.dconf:
#     key: "/org/gnome/desktop/interface/gtk-theme"
#     # value: "'Adwaita-dark'"
#     value: "'Yaru-prussiangreen-dark'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution in ["Debian"]

- name: Gnome Desktop - Preferences - Set desktop interface - gtk-theme (Gnome, Debian)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/interface/gtk-theme "'Yaru-prussiangreen-dark'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution in ["Debian"]

# ### icon-theme ###

# all

# - name: Gnome Desktop - Preferences - create a directory for icon-theme files in userdir (all + Gnome)
#  ansible.builtin.file:
#    path: "/home/{{ env_user }}/.icons"
#    state: directory
# #    mode: '0755'
#  when:
#    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - copy icon-theme Materia-Manjaro-Dark-2 to userdir (all + Gnome)
#  unarchive:
#    src: "files/gnome/icons/Materia-Manjaro-Dark-2.zip"
#    dest: "/home/{{ env_user }}/.icons/"
#    creates: /home/"{{ env_user }}"/.icons/Materia-Manjaro-Dark-2 # creates unterstützt keine tilde
#    remote_src: yes
#    keep_newer: yes
# #    owner: sandro
# #    group: sandro # debian
# #    mode: u=rwx,g=rwx,o=rwx
#  when:
#    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set desktop interface - icon-theme Materia-Manjaro-Dark-2 (Gnome)
# - name: Gnome Desktop - Preferences - Set desktop interface - icon-theme (Gnome, Debian)
#   community.general.dconf:
#     # key: "/org/gnome/desktop/interface/icon-theme"
#     # value: "'Materia-Manjaro-Dark-2'"
#     key: "/org/gnome/desktop/interface/icon-theme"
#     value: "'Yaru-prussiangreen'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution in ["Debian"]

- name: Gnome Desktop - Preferences - Set desktop interface - icon-theme (Gnome, Debian)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/interface/icon-theme "'Yaru-prussiangreen'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution in ["Debian"]

# ### Desktop interface, calendar, sceensaver, ...:
# - name: Gnome Desktop - Preferences - Set desktop interface - show-battery-percentage (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/desktop/interface/show-battery-percentage"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop interface - show-battery-percentage (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/interface/show-battery-percentage "false"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set desktop interface - locate-pointer (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/desktop/interface/locate-pointer"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop interface - locate-pointer (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/interface/locate-pointer "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set desktop calendar - show-weekdate in calendar (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/desktop/calendar/show-weekdate"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop calendar - show-weekdate in calendar (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/calendar/show-weekdate "true"
  when:
    - env_desktop in ["gnome"]

# - name: Set desktop input-sources - show-all-sources (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/desktop/input-sources/show-all-sources"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop input-sources - show-all-sources (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/input-sources/show-all-sources "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set desktop screensaver - idle-activation-enabled (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/desktop/screensaver/idle-activation-enabled"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop screensaver - idle-activation-enabled (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/screensaver/idle-activation-enabled "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set desktop screensaver - lock-enabled (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/desktop/screensaver/lock-enabled"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop screensaver - lock-enabled (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/screensaver/lock-enabled "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set desktop screensaver - lock-delay (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/desktop/screensaver/lock-delay"
#     value: "'0'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop screensaver - lock-delay (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/screensaver/lock-delay "'0'"
  when:
    - env_desktop in ["gnome"]

# - name: Set desktop wm preferences - button-layout (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/desktop/wm/preferences/button-layout"
#     value: "'appmenu:minimize,maximize,close'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set desktop wm preferences - button-layout (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/desktop/wm/preferences/button-layout "'appmenu:minimize,maximize,close'"
  when:
    - env_desktop in ["gnome"]

# ### power settings:
# -------------------
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - power - power-button-action (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/power/power-button-action"
#     value: "'nothing'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - power - power-button-action (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/settings-daemon/plugins/power/power-button-action "'nothing'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - power - sleep-inactive-ac-type (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/power/sleep-inactive-ac-type"
#     value: "'nothing'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - power - sleep-inactive-ac-type (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/settings-daemon/plugins/power/sleep-inactive-ac-type "'nothing'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - power - sleep-inactive-battery-type (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/power/sleep-inactive-battery-type"
#     value: "'nothing'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - power - sleep-inactive-battery-type (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/settings-daemon/plugins/power/sleep-inactive-battery-type "'nothing'"
  when:
    - env_desktop in ["gnome"]

# ### set Display - Night Light
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - color - night-light-enabled (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/color/night-light-enabled"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - color - night-light-enabled (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/settings-daemon/plugins/color/night-light-enabled "false"
  when:
    - env_desktop in ["gnome"]

# ### set Keyboard Shortcuts
# ### ----------------------
#
# Settings - Keyboard - Keyboard Shortcuts
# Alternative Möglichkeit: erstellte/vorhandene Keys eines Systems exportieren + wieder importieren per Skript:
# - dconf dump /org/gnome/settings-daemon/plugins/media-keys/ > dconfDump_keyboardShortcuts.txt
# - dconf load /org/gnome/settings-daemon/plugins/media-keys/ < dconfDump_keyboardShortcuts.txt

# Primary = STRG links

# - control-center - p
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - control-center (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/control-center"
#     value: "['<Primary><Alt>p']"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - control-center (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/control-center" "['<Primary><Alt>p']"
  when:
    - env_desktop in ["gnome"]

# - email- q
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - email (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/email"
#     value: "['<Primary><Alt>q']"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - email (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/email" "['<Primary><Alt>q']"
  when:
    - env_desktop in ["gnome"]

# - www (Standard-Browser) - w
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - www (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/www"
#     value: "['<Primary><Alt>w']"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - www (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/www" "['<Primary><Alt>w']"
  when:
    - env_desktop in ["gnome"]

# set custom Keyboard Shortcuts:
# ------------------------------

# - Authenticator (custom0) - a
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Authenticator,name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/name"
#     value: "'Authenticator'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Authenticator,name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/name" "'Authenticator'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Authenticator,command (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/command"
#     value: "'flatpak run com.belmoussaoui.Authenticator'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Authenticator,command (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/command" "'flatpak run com.belmoussaoui.Authenticator'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Authenticator,binding (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/binding"
#     value: "'<Primary><Alt>a'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Authenticator,binding (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/binding" "'<Primary><Alt>a'"
  when:
    - env_desktop in ["gnome"]

# - KeepassXC (custom1) - k
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - KeepassXC,name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/name"
#     value: "'KeepassXC'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - KeepassXC,name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/name" "'KeepassXC'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - KeepassXC,command (Gnome, Debian, flatpak)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/command"
#     value: "'flatpak run org.keepassxc.KeePassXC'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Debian"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - KeepassXC,command (Gnome, Debian, flatpak)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/command" "'flatpak run org.keepassxc.KeePassXC'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution == "Debian"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - KeepassXC,command (Gnome, Arch)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/command"
#     value: "'KeePassXC'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Archlinux"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - KeepassXC,command (Gnome, Arch)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/command" "'KeePassXC'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution == "Archlinux"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - KeepassXC,binding (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/binding"
#     value: "'<Primary><Alt>k'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - KeepassXC,binding (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/binding" "'<Primary><Alt>k'"
  when:
    - env_desktop in ["gnome"]

# ### Um zu prüfen, ob firefox-esr installiert ist:
# https://dev.to/setevoy/ansible-check-if-a-package-installed-on-a-remote-system-4402
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/package_facts_module.html
- name: Gnome Desktop - Preferences - Gather the package facts
  ansible.builtin.package_facts:
    manager: auto
# ###

# - Firefox (custom2) - f
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - firefox,name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/name"
#     value: "'Firefox'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - firefox,name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/name" "'Firefox'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - firefox,command (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/command"
#     value: "'firefox'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - "'firefox-esr' not in ansible_facts.packages"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - firefox,command (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/command" "'firefox'"
  when:
    - env_desktop in ["gnome"]
    - "'firefox-esr' not in ansible_facts.packages"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - firefox-esr,command (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/command"
#     value: "'firefox-esr'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - "'firefox-esr' in ansible_facts.packages"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - firefox-esr,command (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/command" "'firefox-esr'"
  when:
    - env_desktop in ["gnome"]
    - "'firefox-esr' in ansible_facts.packages"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Firefox,binding (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/binding"
#     value: "'<Primary><Alt>f'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Firefox,binding (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/binding" "'<Primary><Alt>f'"
  when:
    - env_desktop in ["gnome"]

# - Chromium (custom3) - c
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - chromium,name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/name"
#     value: "'Chromium'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - chromium,name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/name" "'Chromium'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - chromium,command (Gnome, Debian, flatpak)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/command"
#     value: "'flatpak run org.chromium.Chromium'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Debian"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - chromium,command (Gnome, Debian, flatpak)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/command" "'flatpak run org.chromium.Chromium'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution == "Debian"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - chromium,command (Gnome, Arch)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/command"
#     value: "'chromium'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Archlinux"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - chromium,command (Gnome, Arch)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/command" "'chromium'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution == "Archlinux"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - chromium,binding (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/binding"
#     value: "'<Primary><Alt>c'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - chromium,binding (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/binding" "'<Primary><Alt>c'"
  when:
    - env_desktop in ["gnome"]

# - Brave Browser (custom4) - b
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Brave Browser,name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom4/name"
#     value: "'Brave Browser'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Brave Browser,name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom4/name" "'Brave Browser'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Brave Browser,command (Gnome, Debian)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom4/command"
#     value: "'brave-browser'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Debian"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Brave Browser,command (Gnome, Debian)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom4/command" "'brave-browser'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution == "Debian"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Brave Browser,command (Gnome, Arch)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom4/command"
#     value: "'brave'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Archlinux"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Brave Browser,command (Gnome, Arch)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom4/command" "'brave'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution == "Archlinux"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Brave Browser,binding (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom4/binding"
#     value: "'<Primary><Alt>b'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Brave Browser,binding (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom4/binding" "'<Primary><Alt>b'"
  when:
    - env_desktop in ["gnome"]

# - Nemo (custom5) - e
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Nemo,name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom5/name"
#     value: "'Nemo'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Nemo,name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom5/name" "'Nemo'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Nemo,command (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom5/command"
#     value: "'nemo'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Nemo,command (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom5/command" "'nemo'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Nemo,binding (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom5/binding"
#     value: "'<Primary><Alt>e'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Nemo,binding (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom5/binding" "'<Primary><Alt>e'"
  when:
    - env_desktop in ["gnome"]

# - gedit (custom6) - g
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - gnome-text-editor, name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom6/name"
#     value: "'gnome-text-editor'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - gnome-text-editor, name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom6/name" "'gnome-text-editor'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - gnome-text-editor, command (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom6/command"
#     value: "'gnome-text-editor'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - gnome-text-editor, command (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom6/command" "'gnome-text-editor'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - gnome-text-editor, binding (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom6/binding"
#     value: "'<Primary><Alt>g'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - gnome-text-editor, binding (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom6/binding" "'<Primary><Alt>g'"
  when:
    - env_desktop in ["gnome"]

# - Libre Office (custom7) - l
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Libre Office,name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom7/name"
#     value: "'Libre Office'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Libre Office,name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom7/name" "'Libre Office'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Libre Office,command (Gnome, Debian, flatpak)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom7/command"
#     value: "'flatpak run org.libreoffice.LibreOffice'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Debian"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Libre Office,command (Gnome, Debian, flatpak)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom7/command" "'flatpak run org.libreoffice.LibreOffice'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution == "Debian"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Libre Office,command (Gnome, Arch)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom7/command"
#     value: "'libreoffice'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Archlinux"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Libre Office,command (Gnome, Arch)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom7/command" "'libreoffice'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution == "Archlinux"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Libre Office,binding (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom7/binding"
#     value: "'<Primary><Alt>l'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Libre Office,binding (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom7/binding" "'<Primary><Alt>l'"
  when:
    - env_desktop in ["gnome"]

# - VSCode / Code OSS (custom8) - m
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - VSCode, name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom8/name"
#     value: "'VSCode'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - VSCode, name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom8/name" "'VSCode'"
  when:
    - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - VSCode, command (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom8/command" "'code'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - VSCode, binding (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom8/binding"
#     value: "'<Primary><Alt>m'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - VSCode, binding (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom8/binding" "'<Primary><Alt>m'"
  when:
    - env_desktop in ["gnome"]

# - Joplin (custom9) - j
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Joplin,name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom9/name"
#     value: "'Joplin'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Joplin,name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom9/name" "'Joplin'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Joplin,command (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom9/command"
#     value: "'flatpak run net.cozic.joplin_desktop'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Joplin,command (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom9/command" "'flatpak run net.cozic.joplin_desktop'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Joplin,binding (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom9/binding"
#     value: "'<Primary><Alt>j'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Joplin,binding (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom9/binding" "'<Primary><Alt>j'"
  when:
    - env_desktop in ["gnome"]

# - Remmina (custom10) - r
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Remmina,name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom10/name"
#     value: "'Remmina'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Remmina,name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom10/name" "'Remmina'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Remmina,command(Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom10/command"
#     value: "'remmina'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Remmina,command (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom10/command" "'remmina'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Remmina,binding (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom10/binding"
#     value: "'<Primary><Alt>r'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Remmina,binding (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom10/binding" "'<Primary><Alt>r'"
  when:
    - env_desktop in ["gnome"]

# - Virtual Machine Manager (custom11) - v
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Virtual Machine Manager,name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom11/name"
#     value: "'Virtual Machine Manager'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Virtual Machine Manager,name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom11/name" "'Virtual Machine Manager'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Virtual Machine Manager,command (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom11/command"
#     value: "'virt-manager'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Virtual Machine Manager,command (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom11/command" "'virt-manager'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Virtual Machine Manager,binding (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom11/binding"
#     value: "'<Primary><Alt>v'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Virtual Machine Manager,binding (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom11/binding" "'<Primary><Alt>v'"
  when:
    - env_desktop in ["gnome"]

# - Software Center 'Gnome Software' (Debian) (custom12) - s
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Gnome Software,name (Gnome, Debian)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/name"
#     value: "'Gnome Software'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Debian"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Gnome Software,name (Gnome, Debian)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/name" "'Gnome Software'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution == "Debian"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Gnome Software,command (Gnome, Debian)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/command"
#     value: "'gnome-software'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Debian"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Gnome Software,command (Gnome, Debian)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/command" "'gnome-software'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution == "Debian"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Gnome Software,binding (Gnome, Debian)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/binding"
#     value: "'<Primary><Alt>s'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Debian"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Gnome Software,binding (Gnome, Debian)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/binding" "'<Primary><Alt>s'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution == "Debian"

# - Software Center 'Pamac-Manager' (Arch) (custom12) - s
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Pamac Manager,name (Gnome, Arch)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/name"
#     value: "'Pamac-Manager'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Archlinux"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Pamac Manager,name (Gnome, Arch)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/name" "'Pamac-Manager'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution == "Archlinux"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Pamac Managercommand (Gnome, Arch)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/command"
#     value: "'pamac-manager'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Archlinux"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Pamac Managercommand (Gnome, Arch)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/command" "'pamac-manager'"
  when:
    - env_desktop in ["gnome"]
    - ansible_distribution == "Archlinux"

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Pamac Manager,binding (Gnome, Arch)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/binding"
#     value: "'<Primary><Alt>s'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]
#     - ansible_distribution == "Archlinux"

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - Pamac Manager,binding (Gnome, Arch)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/binding" "'<Primary><Alt>s'"
  when:
  - env_desktop in ["gnome"]
  - ansible_distribution == "Archlinux"

# - ulauncher (custom13) - ctrl+space
# https://github.com/Ulauncher/Ulauncher/discussions/991
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - ulauncher,name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom13/name"
#     value: "'ulauncher'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - ulauncher,name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom13/name" "'ulauncher'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - ulauncher,command (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom13/command"
#     value: "'ulauncher-toggle'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - ulauncher,command (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom13/command" "'ulauncher-toggle'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - ulauncher,binding (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom13/binding"
#     value: "'<Control>space'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - ulauncher,binding (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom13/binding" "'<Control>space'"
  when:
    - env_desktop in ["gnome"]

# ### ---------------------------------------------------
# ### - set/create list for configured custom-keybindings
# ### ---------------------------------------------------
# - name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - custom-keybindings (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings"
#     value: "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom4/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom5/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom6/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom7/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom8/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom9/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom10/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom11/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom13/']"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set settings-daemon - plugin - media-keys - custom-keybindings (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings" "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom1/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom2/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom3/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom4/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom5/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom6/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom7/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom8/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom9/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom10/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom11/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom12/', '/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom13/']"
  when:
    - env_desktop in ["gnome"]

# ### Gnome Weather:
# ------------------
#
# - name: Gnome Desktop - Preferences - Set gnome  - Weather automatic-location (Gnome)
#  community.general.dconf:
#    key: "/org/gnome/Weather/automatic-location"
#    value: "false"
#  when:
# #    - ansible_os_family == "Suse"
#    - env_desktop == "gnome"

# - name: Gnome Desktop - Preferences - Set gnome  - Weather locations (Gnome)
#  community.general.dconf:
#    key: "/org/gnome/Weather/locations"
#    value: "[<(uint32 2, <('Niederkirchen, Saarland', '', false, [(0.86339344922787564, 0.12656180196211969)], [(0.863065315111196, 0.13148146449914197)])>)>]"
#  when:
# #    - ansible_os_family == "Suse"
#    - env_desktop == "gnome"

# ### nemo filebrowser -  preferences:
# ------------------------------------
# - name: Gnome Desktop - Preferences - Set nemo preferences - click-policy (Gnome)
#   community.general.dconf:
#     key: "/org/nemo/preferences/click-policy"
#     value: "'double'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set nemo preferences - click-policy (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/nemo/preferences/click-policy" "'double'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set nemo preferences - show-computer-icon-toolbar (Gnome)
#   community.general.dconf:
#     key: "/org/nemo/preferences/show-computer-icon-toolbar"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set nemo preferences - show-computer-icon-toolbar (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/nemo/preferences/show-computer-icon-toolbar" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set nemo preferences - show-home-icon-toolbar (Gnome)
#   community.general.dconf:
#     key: "/org/nemo/preferences/show-home-icon-toolbar"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set nemo preferences - show-home-icon-toolbar (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/nemo/preferences/show-home-icon-toolbar" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set nemo preferences - show-list-view-icon-toolbar (Gnome)
#   community.general.dconf:
#     key: "/org/nemo/preferences/show-list-view-icon-toolbar"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set nemo preferences - show-list-view-icon-toolbar (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/nemo/preferences/show-list-view-icon-toolbar" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set nemo preferences - show-location-entry (Gnome)
#   community.general.dconf:
#     key: "/org/nemo/preferences/show-location-entry"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set nemo preferences - show-location-entry (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/nemo/preferences/show-location-entry" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set nemo preferences - show-new-folder-icon-toolbar (Gnome)
#   community.general.dconf:
#     key: "/org/nemo/preferences/show-new-folder-icon-toolbar"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set nemo preferences - show-new-folder-icon-toolbar (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/nemo/preferences/show-new-folder-icon-toolbar" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set nemo preferences - show-open-in-terminal-toolbar (Gnome)
#   community.general.dconf:
#     key: "/org/nemo/preferences/show-open-in-terminal-toolbar"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set nemo preferences - show-open-in-terminal-toolbar (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/nemo/preferences/show-open-in-terminal-toolbar" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set nemo preferences - show-reload-icon-toolbar (Gnome)
#   community.general.dconf:
#     key: "/org/nemo/preferences/show-reload-icon-toolbar"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set nemo preferences - show-reload-icon-toolbar (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/nemo/preferences/show-reload-icon-toolbar" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set nemo preferences - show-show-thumbnails-toolbar (Gnome)
#   community.general.dconf:
#     key: "/org/nemo/preferences/show-show-thumbnails-toolbar"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set nemo preferences - show-show-thumbnails-toolbar (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/nemo/preferences/show-show-thumbnails-toolbar" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set nemo extensions - nemo terminal - default-visible (Gnome)
#   community.general.dconf:
#     key: "/org/nemo/extensions/nemo-terminal/default-visible"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set nemo extensions - nemo terminal - default-visible (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/nemo/extensions/nemo-terminal/default-visible" "false"
  when:
    - env_desktop in ["gnome"]

# ### gedit -  preferences:
# -------------------------
# - name: Gnome Desktop - Preferences - Set gedit preferences - scheme (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/gedit/preferences/editor/scheme"
#     value: "'solarized-dark'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gedit preferences - scheme (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/gedit/preferences/editor/scheme" "'solarized-dark'"
  when:
    - env_desktop in ["gnome"]

# ### gnome terminal - profiles and preferences:
# ----------------------------------------------
# #
# https://linuxconfig.org/introduction-to-the-dconf-configuration-system
# https://askubuntu.com/questions/941770/how-do-i-create-gnome-terminal-profiles-at-a-global-level-for-all-users
# #
- name: Gnome Desktop - Preferences - Set gnome terminal - profiles and preferences (Gnome, Debian)
  ansible.builtin.script: "{{ env_PWD }}/tasks/Desktop_Gnome/config_workstation-Gnome-DesktopPreferences-terminal.sh" # funktioniert; ansible version 2.9
  # #  ansible.builtin.script: "{{ env_PWD }}/tasks/Desktop_Gnome/config_workstation-Gnome-DesktopPreferences-terminal.sh" # ab ansible version 2.10
  # #  ansible.builtin.script:  # ab ansible version 2.10
  # #    cmd: "{{ env_PWD }}/tasks/Desktop_Gnome/config_workstation-Gnome-DesktopPreferences-terminal.sh"
  # #
  # #  command: "{{ env_PWD }}/tasks/Desktop_Gnome/config_workstation-Gnome-DesktopPreferences-terminal.sh" # funktioniert; ansible version 2.9
  # #  ansible.builtin.command: "{{ env_PWD }}/tasks/Desktop_Gnome/config_workstation-Gnome-DesktopPreferences-terminal.sh" # ab ansible version 2.10
  # #  ansible.builtin.command: # ab ansible version 2.10
  # #    cmd: "{{ env_PWD }}/tasks/Desktop_Gnome/config_workstation-Gnome-DesktopPreferences-terminal.sh"
  # # The command(s) will not be processed through the shell, so variables like $HOME and operations like "<", ">", "|", ";" and "&" will not work. 
  # # Use the shell module if you need these features.
  # #
  # #  shell: "{{ env_PWD }}/tasks/Desktop_Gnome/config_workstation-Gnome-DesktopPreferences-terminal.sh" # funktioniert; ansible version 2.9
  # #  ansible.builtin.shell: "{{ env_PWD }}/tasks/Desktop_Gnome/config_workstation-Gnome-DesktopPreferences-terminal.sh" # ab ansible version 2.10
  args:
    creates: "/home/{{ env_user }}/.ansible_TerminalProfileSet"
  when:
    - env_desktop in ["gnome"]
  # #    - "ansible_version.major is version('2', '=')"
  # #    - "ansible_version.minor is version('9', '<=')"
  # - "ansible_version.full is version('2.10.0', '>=')"
  # - ansible_distribution in ["Debian"]

- name: Gnome Desktop - Preferences - Create flag - file .ansible_TerminalProfileSet (Gnome)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.ansible_TerminalProfileSet"
    state: touch
    mode: u=rw,g=r,o=r
    modification_time: preserve
    access_time: preserve
  when:
    - env_desktop in ["gnome"]
  # - ansible_distribution in ["Debian"]

  # ### tilix (tiling terminal emulator) - profiles and preferences:
  # ----------------------------------------------------------------
  # bei EndeavourOS: Solange manche Einstellungen auf default stehen, funktionieren Änderungen nicht
  # Workaround: manuell Werte in der GUI ändern oder zumindest den "Schieber" bei default deaktivieren und dann ansible playbook nochmal starten

  # - name: Gnome Desktop - Preferences - Gnome Desktop Prefs - tilix terminal - close-with-last-session (Gnome)
  #   community.general.dconf:
  #     key: "/com/gexperts/Tilix/close-with-last-session"
  #     value: "false"
  #     state: present
  #   when:
  #     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Gnome Desktop Prefs - tilix terminal - close-with-last-session (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/com/gexperts/Tilix/close-with-last-session" "false"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Gnome Desktop Prefs - tilix terminal - control-scroll-zoom (Gnome)
#   community.general.dconf:
#     key: "/com/gexperts/Tilix/control-scroll-zoom"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Gnome Desktop Prefs - tilix terminal - control-scroll-zoom (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/com/gexperts/Tilix/control-scroll-zoom" "true"
  when:
    - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Gnome Desktop Prefs - tilix terminal - paste-strip-trailing-whitespace (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/com/gexperts/Tilix/paste-strip-trailing-whitespace" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Gnome Desktop Prefs - tilix terminal - terminal-title-style (Gnome)
#   community.general.dconf:
#     key: "/com/gexperts/Tilix/terminal-title-style"
#     value: "'small'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Gnome Desktop Prefs - tilix terminal - terminal-title-style (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/com/gexperts/Tilix/terminal-title-style" "'small'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Gnome Desktop Prefs - tilix terminal - use-overlay-scrollbar (Gnome)
#   community.general.dconf:
#     key: "/com/gexperts/Tilix/use-overlay-scrollbar"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Gnome Desktop Prefs - tilix terminal - use-overlay-scrollbar (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/com/gexperts/Tilix/use-overlay-scrollbar" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Gnome Desktop Prefs - tilix terminal - use-tabs (Gnome)
#   community.general.dconf:
#     key: "/com/gexperts/Tilix/use-tabs"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Gnome Desktop Prefs - tilix terminal - use-tabs (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/com/gexperts/Tilix/use-tabs" "true"
  when:
    - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Gnome Desktop Prefs - Set tilix terminal - profiles and preferences (Gnome)
  ansible.builtin.script: "tasks/Desktop_Gnome/config_workstation-Gnome-DesktopPreferences-tilix.sh"
  args:
    creates: "/home/{{ env_user }}/.ansible_tilixTerminalProfileSet"
  when:
    - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Gnome Desktop Prefs - tilix terminal - ProfileSet - create flag - file (Gnome)
  ansible.builtin.file:
    path: "/home/{{ env_user }}/.ansible_tilixTerminalProfileSet"
    state: touch
    mode: u=rw,g=r,o=r
    modification_time: preserve
    access_time: preserve
  when:
    - env_desktop in ["gnome"]

# ### gnome shell extensions -  preferences:
# ------------------------------------------

- name: Gnome Desktop - Preferences - Set gnome shell extensions - enabled-extension (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write /org/gnome/shell enabled-extensions "['dash-to-panel@jderose9.github.com', 'user-theme@gnome-shell-extensions.gcampax.github.com']"
  when:
    - env_desktop in ["gnome"]

# ### ding
# https://ubuntuhandbook.org/index.php/2022/03/show-trash-ubuntu-2204-desktop/
# - name: Gnome Desktop - Preferences - Set gnome shell extensions - ding - show-home (Gnome)
#   # Settings - Appearance - Desktop Icons - Show Personal folder
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/ding/show-home"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome shell extensions - ding - show-home (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/shell/extensions/ding/show-home" "false"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - ding - start-corner (Gnome)
#   # Settings - Appearance - Desktop Icons - Position of New Icons
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/ding/start-corner"
#     value: "'top-left'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome shell extensions - ding - start-corner (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/shell/extensions/ding/start-corner" "'top-left'"
  when:
    - env_desktop in ["gnome"]

# # ### Dash to Dock:
# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - custom-theme-shrink (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/custom-theme-shrink"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - dash-max-icon-size (Gnome)
#   # Appearence - Dock - Icon Size
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/dash-max-icon-size"
#     value: "32"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - disable-overview-on-startup (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/disable-overview-on-startup"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - dock-fixed (Gnome)
#   # Appearence - Dock - Auot-hide the Dock: enable
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/dock-fixed"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - dock-position (Gnome)
#   # Appearence - Dock - Auot-hide the Dock: enable
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/dock-position"
#     value: "'LEFT'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - extend-height (Gnome)
#   # Appearence - Dock - Panel mode: enable
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/extend-height"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - height-fraction (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/height-fraction"
#     value: "'0.94999999999999996'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - isolate-workspaces (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/isolate-workspaces"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - multi-monitor" (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/multi-monitor"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - running-indicator-style" (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/running-indicator-style"
#     value: "'DOTS'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - scroll-action" (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/scroll-action"
#     value: "'switch-workspace'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - show-mounts (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/show-mounts"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - show-mounts (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/show-mounts"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - show-mounts-only-mounted (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/show-mounts-only-mounted"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - dash-to-dock - show-trash (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/dash-to-dock/show-trash"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

# ### openweather:
# - name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - city (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/openweather/city"
#     value: "'49.4641816,7.2484007>Niederkirchen, Kuseler Straße, Saal, Niederkirchen, Sankt Wendel, Landkreis St. Wendel, Saarland, 66606, Deutschland >-1 && 49.49342345,6.828330133618561>Nunkirchen, Wadern, Landkreis Merzig-Wadern, Saarland, Deutschland >-1'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - city (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/shell/extensions/openweather/city" "'49.4641816,7.2484007>Niederkirchen, Kuseler Straße, Saal, Niederkirchen, Sankt Wendel, Landkreis St. Wendel, Saarland, 66606, Deutschland >-1 && 49.49342345,6.828330133618561>Nunkirchen, Wadern, Landkreis Merzig-Wadern, Saarland, Deutschland >-1'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - actual-city" (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/openweather/actual-city"
#     value: "0"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - actual-city" (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/shell/extensions/openweather/actual-city" "0"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - days-forecast (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/openweather/days-forecast"
#     value: "4"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - days-forecast (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/shell/extensions/openweather/days-forecast" "4"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - menu-alignment (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/openweather/menu-alignment"
#     value: "80.099999999999994"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - menu-alignment (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/shell/extensions/openweather/menu-alignment" "80.099999999999994"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - position-in-panel (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/openweather/position-in-panel"
#     value: "'center'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - position-in-panel (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/shell/extensions/openweather/position-in-panel" "'center'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - pressure-unit (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/openweather/pressure-unit"
#     value: "'hPa'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - pressure-unit (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/shell/extensions/openweather/pressure-unit" "'hPa'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - unit (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/openweather/unit"
#     value: "'celsius'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - unit (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/shell/extensions/openweather/unit" "'celsius'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - wind-speed-unit (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/shell/extensions/openweather/wind-speed-unit"
#     value: "'kph'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome shell extensions - openweather - wind-speed-unit (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/shell/extensions/openweather/wind-speed-unit" "'kph'"
  when:
    - env_desktop in ["gnome"]

# ###################################################
# TODO: ggf. GNOME Shell Apps Dashboard - Categories
# ###################################################
#
# https://specifications.freedesktop.org/menu-spec/menu-spec-latest.html
# A. Registered Categories
#
# https://github.com/BenJetson/gnome-dash-fix
# https://www.gauthampdas.com/blog/tech/linux/enabling-categories-in-gnome-3-8-shell-application-menu#
#
# dconf editor: /org/gnome/desktop/app-folders/folder-children

# - name: Gnome Desktop - Preferences - GNOME Shell Apps Dashboard - Categories (Suse + Gnome)
#  ansible.builtin.command: gsettings set org.gnome.desktop.app-folders folder-children "['AudioVideo', 'Development', 'Education', 'Game', 'Graphics', 'Network', 'Office', 'Science', 'Settings', 'System', 'Utility']"
#  when:
#    - ansible_os_family == "Suse"
#    - env_desktop == "gnome"

# ################################
# ### Gnome Epiphany (Web Browser)
# - name: Gnome Desktop - Preferences - Set gnome - epiphany - aks-for-default (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/epiphany/ask-for-default"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - epiphany - aks-for-default (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/epiphany/ask-for-default" "false"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - epiphany - default-search-engine (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/epiphany/default-search-engine"
#     value: "'DuckDuckGo'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - epiphany - default-search-engine (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/epiphany/default-search-engine" "'DuckDuckGo'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - epiphany - reader - color-scheme (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/epiphany/reader/color-scheme"
#     value: "'dark'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - epiphany - reader - color-scheme (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/epiphany/reader/color-scheme" "'dark'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - epiphany - web - remember-passwords (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/epiphany/web/remember-passwords"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - epiphany - web - remember-passwords (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/epiphany/web/remember-passwords" "false"
  when:
    - env_desktop in ["gnome"]

# ##########################
# ### Gnome Evolution (Mail)
# - name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - classify-private (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/calendar/classify-private"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - classify-private (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/calendar/classify-private" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - compress-weekend (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/calendar/compress-weekend"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - compress-weekend (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/calendar/compress-weekend" "false"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - day-end-hour (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/calendar/day-end-hour"
#     value: "16"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - day-end-hour (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/calendar/day-end-hour" "16"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - day-start-hour (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/calendar/day-start-hour"
#     value: "7"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - day-start-hour (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/calendar/day-start-hour" "7"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - editor-show-timezone (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/calendar/editor-show-timezone"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - editor-show-timezone (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/calendar/editor-show-timezone" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - prefer-new-item (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/calendar/prefer-new-item"
#     value: "'event-new'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - prefer-new-item (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/calendar/prefer-new-item" "'event-new'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - primary-memos (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/calendar/primary-memos"
#     value: "'system-memo-list'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - primary-memos (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/calendar/primary-memos" "'system-memo-list'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - show-icons-month-view (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/calendar/show-icons-month-view"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - show-icons-month-view (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/calendar/show-icons-month-view" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - show-week-numbers (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/calendar/show-week-numbers"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - show-week-numbers (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/calendar/show-week-numbers" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - use-24hour-format (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/calendar/use-24hour-format"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - calendar - use-24hour-format (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/calendar/use-24hour-format" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - mail - browser-close-on-reply-policy (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/mail/browser-close-on-reply-policy"
#     value: "'never'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - mail - browser-close-on-reply-policy (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/mail/browser-close-on-reply-policy" "'never'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - mail - composer-delay-outbox-flush (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/mail/composer-delay-outbox-flush"
#     value: "0"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - mail - composer-delay-outbox-flush (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/mail/composer-delay-outbox-flush" "0"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - mail - composer-show-bcc (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/mail/composer-show-bcc"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - mail - composer-show-bcc (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/mail/composer-show-bcc" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - mail - composer-spell-languages (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/mail/composer-spell-languages"
#     value: "['de_DE']"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - mail - composer-spell-languages (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/mail/composer-spell-languages" "['de_DE']"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - mail - composer-top-signature (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/mail/composer-top-signature"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - mail - composer-top-signature (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/mail/composer-top-signature" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - mail - forward-style-name (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/mail/forward-style-name"
#     value: "'inline'"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - mail - forward-style-name (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/mail/forward-style-name" "'inline'"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - mail - layout (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/mail/layout"
#     value: "1"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - mail - layout (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/mail/layout" "1"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - mail - mark-seen (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/mail/mark-seen"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - mail - mark-seen (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/mail/mark-seen" "false"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - mail - show-sender-photo (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/mail/show-sender-photo"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - mail - show-sender-photo (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/mail/show-sender-photo" "true"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - mail - show-to-do-bar (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/mail/show-to-do-bar"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - mail - show-to-do-bar (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/mail/show-to-do-bar" "false"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - mail - show-to-do-bar-sub (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/mail/show-to-do-bar-sub"
#     value: "false"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - mail - show-to-do-bar-sub (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/mail/show-to-do-bar-sub" "false"
  when:
    - env_desktop in ["gnome"]

# - name: Gnome Desktop - Preferences - Set gnome - evolution - mail - to-do-bar-show-no-duedate-tasks (Gnome)
#   community.general.dconf:
#     key: "/org/gnome/evolution/mail/to-do-bar-show-no-duedate-tasks"
#     value: "true"
#     state: present
#   when:
#     - env_desktop in ["gnome"]

- name: Gnome Desktop - Preferences - Set gnome - evolution - mail - to-do-bar-show-no-duedate-tasks (Gnome)
  become: true
  become_user: "{{ env_user }}"
  ansible.builtin.shell: dconf write "/org/gnome/evolution/mail/to-do-bar-show-no-duedate-tasks" "true"
  when:
    - env_desktop in ["gnome"]
