- name: start libvirtd
  tags: VM
  service:
    name: libvirtd
    state: started
  when: ansible_virtualization_role != "guest"

- name: enable libvirtd
  tags: VM
  service:
    name: libvirtd
    #state: enabled
    enabled: yes
  when: ansible_virtualization_role != "guest" 


##############################################
### Create virtual networks + virtual machines
# https://serverfault.com/questions/434064/correct-way-to-move-kvm-vm
# https://unix.stackexchange.com/questions/628454/how-can-i-migrate-backup-restore-a-virt-manager-snapshot

- name: destroy/undefine default virtual network (Qemu-Kvm)
  tags: VM
  ansible.builtin.shell:
    cmd: virsh net-destroy default && virsh net-undefine default
  args:
    creates: /home/{{ env_user }}/.vm_qemu-kvm_created
  when: ansible_virtualization_role != "guest"

- name: create virtual networks (Qemu-Kvm)
  tags: VM
  ansible.builtin.shell:
    #cmd: ls files/VM/netdump_*.xml | xargs -I % sh -c "virsh net-define %"   # Dateiname inkl. Pfad
    chdir: files/VM/
    cmd: ls netdump_*.xml | xargs -I % sh -c "virsh net-define %"   # nur Dateiname, da vorher in Verzeichnis gewechselt und dann erst ls
  args:
    creates: /home/{{ env_user }}/.vm_qemu-kvm_created
  when: ansible_virtualization_role != "guest"

- name: start all virtual networks (Qemu-Kvm)
  tags: VM
  ansible.builtin.shell:
    chdir: files/VM/
    cmd: ls netdump_*.xml | xargs -I % sh -c "echo % | cut -d _ -f 2" | xargs -I % sh -c "echo % | cut -d . -f 1" | xargs -I % sh -c "virsh net-start %"
    #z.B.:  netdump_default.xml                        default.xml                                 default                            virsh net-autostart default
  args:
    creates: /home/{{ env_user }}/.vm_qemu-kvm_created
  when: ansible_virtualization_role != "guest"

- name: autostart all virtual networks (Qemu-Kvm)
  tags: VM
  ansible.builtin.shell:
    chdir: files/VM/
    cmd: ls netdump_*.xml | xargs -I % sh -c "echo % | cut -d _ -f 2" | xargs -I % sh -c "echo % | cut -d . -f 1" | xargs -I % sh -c "virsh net-autostart %"
  args:
    creates: /home/{{ env_user }}/.vm_qemu-kvm_created
  when: ansible_virtualization_role != "guest"


- name: create virtual machines (Qemu-Kvm)
  tags: VM
  ansible.builtin.shell:
    chdir: files/VM/
    cmd: ls dump_*.xml | xargs -I % sh -c "virsh define %"    # 'virsh define': just creates, does not start vm; 'virsh create': creates + starts vm
  args:
    creates: /home/{{ env_user }}/.vm_qemu-kvm_created
  when: ansible_virtualization_role != "guest"


- name: redefine + set current virtual machine snapshots (Qemu-Kvm)
  tags: VM
  ansible.builtin.shell:
    chdir: "/home/{{ env_user }}/dev/ansible_test/files/VM/"
    cmd: ./vm_snapshotcreate-redefine.sh
  args:
    creates: /home/{{ env_user }}/.vm_qemu-kvm_created
  when: ansible_virtualization_role != "guest"

# muss nach Neustart ausgeführt werden (wenn notwendige Services zur Verfügung stehen):
#- name: create storage pool 'Downloads' for env_user (Qemu-Kvm)
#  tags: VM
#  ansible.builtin.shell:
#    chdir: "/home/{{ env_user }}/dev/ansible_test/files/VM/"
#    cmd: ./vm_storagepool-define.sh {{ env_user }}
#  args:
#    creates: /home/{{ env_user }}/.vm_qemu-kvm_created
#  when: ansible_virtualization_role != "guest"


- name: create 'flag-file' indicating VM-stuff was created (Qemu-Kvm)
  tags: VM
  ansible.builtin.file:
    path: /home/{{ env_user }}/.vm_qemu-kvm_created
    state: touch
    modification_time: preserve
  when: ansible_virtualization_role != "guest"

